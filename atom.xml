<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZERO开发</title>
  
  <subtitle>一个独立开发者的博客</subtitle>
  <link href="http://z11r00.github.io/atom.xml" rel="self"/>
  
  <link href="http://z11r00.github.io/"/>
  <updated>2024-06-01T03:54:55.973Z</updated>
  <id>http://z11r00.github.io/</id>
  
  <author>
    <name>北桥苏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【YOLOv5】实现扑克牌的点数识别</title>
    <link href="http://z11r00.github.io/2024/05/30/%E3%80%90YOLOv5%E3%80%91%E5%AE%9E%E7%8E%B0%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E7%82%B9%E6%95%B0%E8%AF%86%E5%88%AB/"/>
    <id>http://z11r00.github.io/2024/05/30/%E3%80%90YOLOv5%E3%80%91%E5%AE%9E%E7%8E%B0%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E7%82%B9%E6%95%B0%E8%AF%86%E5%88%AB/</id>
    <published>2024-05-30T12:13:50.000Z</published>
    <updated>2024-06-01T03:54:55.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实年初的时候，我也跟着别人的源码，用 Tensoflow 实现过扑克牌的目标检测。虽然也通过博文的方式记录了，但是那个项目使用的 TF 版本比较旧，自身对 TF 并不熟。后期如果说要升级或修改估计够呛，知道最近看到 YOLO 对目标检测的实现方法，发现这个更方便快捷。    </p><p>于是决定用 YOLOv5.6 来重新实现一下扑克牌的点数识别，本文章主要是个人记录，也面向刚刚接触 YOLO 的同学阅读。所以以下会从数据标注，归一化处理到模型训练的实战内容，也包括各种踩坑经历和处理方法，最后对 detect.py 的重写，完成目标对象的坐标和识别标记输出。<br><img src="https://image-static.segmentfault.com/267/391/2673915127-c849e664b864d0ec_fix732" alt="图片"></p><h2 id="YOLO-简介"><a href="#YOLO-简介" class="headerlink" title="YOLO 简介"></a>YOLO 简介</h2><p>YOLO（You Only Look Once）是一种基于深度神经网络的对象识别和定位算法，其最大的特点是运行速度很快，可以用于实时系统。现在 YOLO 已经发展到 v8 版本，每个版本都在原有基础上改进演化的。选择 V5 是因为后面几个新版发行并不久，v5 相关资料和文章较多，踩坑起来也好搜索。其中每个版本里又有按场景划分几个特定场景版本，比如：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YOLOv5s：最小版本，速度最快，但检测性能最低。</span><br><span class="line">YOLOv5m：中等版本，速度比 s 慢一些，但检测性能更好。</span><br><span class="line">YOLOv5l：大型版本，速度比 m 慢，但检测性能更好。</span><br><span class="line">YOLOv5x：最大版本，速度最慢，但是检测性能最好。</span><br><span class="line">YOLOv5n6：中等版本，速度比 m 快一些，但检测性能更好。</span><br></pre></td></tr></table></figure><p>总之，根据具体需求和应用场景，可以选择合适的 YOLOv5 版本以满足性能、速度和准确性的要求，我这里以 YOLOv5s 为例。然后在项目开始前呢，我们可以先去 <a href="https://link.segmentfault.com/?enc=x88A+RY/bjxtshNk/k1hAA==.aoHBzhzGSjxn20IEoaQph1bdhG5DFP31kAEshxaYkXciT1PrKvHg6JP4wn2xlhNr">https://github.com/ultralytics/yolov5</a> 下载 demo 代码和权重文件，比如 yolov5s.pt，下载完后就要准备数据集，也就是标记的图片。<br><img src="https://image-static.segmentfault.com/320/973/3209730729-15645b8931c9eb91_fix732" alt="图片"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>图片的话，看你要识别的目标是啥，可以拍摄整理或去网上下载。为了让训练的模型稍微有点准确，最好准备一两百张，我这里就直接从原来 TF 项目那里拿过来。一共有 363 张扑克牌图片并且都已经用 VOC 格式标注好了，不过为了大家了解，这里还是会介绍如何标注，以及标注工具 labelImg 的基本使用。 </p><h3 id="LabelImg-使用"><a href="#LabelImg-使用" class="headerlink" title="LabelImg 使用"></a>LabelImg 使用</h3><h4 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a>操作界面</h4><p><img src="https://image-static.segmentfault.com/311/248/3112481172-3af548ba8af231ee_fix732" alt="图片"></p><h4 id="快捷使用"><a href="#快捷使用" class="headerlink" title="快捷使用"></a>快捷使用</h4><p>1、W 是进行标注<br>2、A 是切换到上一张图片<br>3、D 是切换到下一张图片<br><img src="https://image-static.segmentfault.com/111/849/1118491175-865fe738bda29ec9_fix732" alt="图片"></p><h4 id="LabelImg-保存格式"><a href="#LabelImg-保存格式" class="headerlink" title="LabelImg 保存格式"></a>LabelImg 保存格式</h4><p>1.PascalVOC 默认，xml格式<br>2.YOLO text可以直接拿来训练不用转换<br><img src="https://image-static.segmentfault.com/426/055/4260550021-d4c47e08767ad980_fix732" alt="图片"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>在根目录下新建 datasets 用于放置训练的数据集，由于用同一 yolo 可以创建多个检测目标，所以在 datasets 先创建一个项目名目录。然后再在项目名下可创建 VOC 和 YOLO 两种格式的目录，虽然 labelImg 标注后可以直接保存 YOLO 格式也就是归一化后的 text，但是毕竟三百多张图的标注，我这里依然使用以前 TF 的 VOC 的标注数据。如果需要这些数据集的，可以留言，到时我再放在评论区。<br><img src="https://image-static.segmentfault.com/159/512/1595126405-92f53035642663bd_fix732" alt="图片"></p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>依赖直接安装项目根目录下的 requirements.txt 就可以，但是要严格按照里面的版本。因为我用的是以前 conda 创建的环境，可以包都装过，所以一开始就看到已经有的就没装，导致后面运行的时候很多问题都是包的版本问题。所以最好的方法就是用 conda 创建一个新环境，然后直接 pip install -r requirements.txt 是最好的。<br><img src="https://image-static.segmentfault.com/305/502/3055028917-6b3c929a5cdcb531_fix732" alt="图片"></p><h3 id="归一化和数据集划分"><a href="#归一化和数据集划分" class="headerlink" title="归一化和数据集划分"></a>归一化和数据集划分</h3><p>如果 LabelImg 标注后保存的是 YOLO 格式，归一化过程就可以略过了。前面我也说了是用的以前扑克牌的 VOC 格式，所以需要对 xml 里节点数据抽取坐标和标记然后转换成 yolo 的 txt 格式。以下代码是我从其他博主那薅过来的，主要就是归一化和划分训练数据集和校验数据集。特别主要是 classes 部分要修改成自己的目标分类，其他的可以不用改动，当然只是划分的话可以适当删减。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">from os import listdir, <span class="built_in">getcwd</span></span><br><span class="line">from os.path import <span class="keyword">join</span></span><br><span class="line">import random</span><br><span class="line">from shutil import copyfile</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;queen&quot;</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;ace&quot;</span>]</span><br><span class="line">TRAIN_RATIO = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def clear_hidden_files(path):</span><br><span class="line">    dir_list = os.listdir(path)</span><br><span class="line">    abspath = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i in dir_list:</span><br><span class="line">        abspath = os.path.<span class="keyword">join</span>(os.path.abspath(path), i)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(abspath):</span><br><span class="line">        <span class="keyword">if</span> i.startswith(<span class="string">&quot;._&quot;</span>):</span><br><span class="line">            os.<span class="built_in">remove</span>(abspath)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        clear_hidden_files(abspath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert(size, box):</span><br><span class="line">    dw = <span class="number">1</span>. / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1</span>. / size[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">x</span> = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">y</span> = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">w</span> = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">x</span> = <span class="keyword">x</span> * dw</span><br><span class="line">    <span class="keyword">w</span> = <span class="keyword">w</span> * dw</span><br><span class="line">    <span class="keyword">y</span> = <span class="keyword">y</span> * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">x</span>, <span class="keyword">y</span>, <span class="keyword">w</span>, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert_annotation(image_id):</span><br><span class="line">    in_file = <span class="keyword">open</span>(<span class="string">&#x27;Poker/VOC/Annotations/%s.xml&#x27;</span> % image_id)</span><br><span class="line">    out_file = <span class="keyword">open</span>(<span class="string">&#x27;Poker/VOC/Labels/%s.txt&#x27;</span> % image_id, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.<span class="keyword">find</span>(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    <span class="keyword">w</span> = <span class="keyword">int</span>(size.<span class="keyword">find</span>(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="keyword">int</span>(size.<span class="keyword">find</span>(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj in root.iter(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.<span class="keyword">find</span>(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.<span class="keyword">find</span>(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls not in classes <span class="built_in">or</span> <span class="keyword">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        cls_id = classes.<span class="built_in">index</span>(cls)</span><br><span class="line">        xmlbox = obj.<span class="keyword">find</span>(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        <span class="keyword">b</span> = (float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;xmin&#x27;</span>).text), float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;xmax&#x27;</span>).text), float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((<span class="keyword">w</span>, h), <span class="keyword">b</span>)</span><br><span class="line"></span><br><span class="line">        out_file.<span class="keyword">write</span>(str(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.<span class="keyword">join</span>([str(<span class="keyword">a</span>) <span class="keyword">for</span> <span class="keyword">a</span> in bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    in_file.<span class="keyword">close</span>()</span><br><span class="line">    out_file.<span class="keyword">close</span>()</span><br><span class="line">wd = os.<span class="built_in">getcwd</span>()</span><br><span class="line">data_base_dir = os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;Poker/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(data_base_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(data_base_dir)</span><br><span class="line"></span><br><span class="line">work_sapce_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;VOC/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(work_sapce_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(work_sapce_dir)</span><br><span class="line"></span><br><span class="line">annotation_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Annotations/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(annotation_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(annotation_dir)</span><br><span class="line"></span><br><span class="line">image_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Images/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(image_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(image_dir)</span><br><span class="line"></span><br><span class="line">yolo_labels_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Labels/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolo_labels_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolo_labels_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;images/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;labels/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_train_dir = os.path.<span class="keyword">join</span>(yolov5_images_dir, <span class="string">&quot;train/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_train_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_train_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_test_dir = os.path.<span class="keyword">join</span>(yolov5_images_dir, <span class="string">&quot;val/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_test_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_test_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_train_dir = os.path.<span class="keyword">join</span>(yolov5_labels_dir, <span class="string">&quot;train/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_train_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_train_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_test_dir = os.path.<span class="keyword">join</span>(yolov5_labels_dir, <span class="string">&quot;val/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_test_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_test_dir)</span><br><span class="line"></span><br><span class="line">train_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_train.txt&quot;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">test_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_val.txt&quot;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">train_file.<span class="keyword">close</span>()</span><br><span class="line">test_file.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">train_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_train.txt&quot;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">test_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_val.txt&quot;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">list_imgs = os.listdir(image_dir)  # <span class="keyword">list</span> image <span class="keyword">files</span></span><br><span class="line">prob = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;Probability: %d&quot;</span> % prob)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(list_imgs)):</span><br><span class="line">    path = os.path.<span class="keyword">join</span>(image_dir, list_imgs[i])</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">        image_path = image_dir + list_imgs[i]</span><br><span class="line">        voc_path = list_imgs[i]</span><br><span class="line">        (nameWithoutExtention, extention) = os.path.splitext(os.path.basename(image_path))</span><br><span class="line">        (voc_nameWithoutExtention, voc_extention) = os.path.splitext(os.path.basename(voc_path))</span><br><span class="line">        annotation_name = nameWithoutExtention + <span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">        annotation_path = os.path.<span class="keyword">join</span>(annotation_dir, annotation_name)</span><br><span class="line"></span><br><span class="line">        label_name = nameWithoutExtention + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        label_path = os.path.<span class="keyword">join</span>(yolo_labels_dir, label_name)</span><br><span class="line"></span><br><span class="line">    prob = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Probability: %d&quot;</span> % prob)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prob &lt; TRAIN_RATIO):  # train dataset</span><br><span class="line">        <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(annotation_path):</span><br><span class="line">            train_file.<span class="keyword">write</span>(image_path + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            convert_annotation(nameWithoutExtention)  # convert label</span><br><span class="line">            copyfile(image_path, yolov5_images_train_dir + voc_path)</span><br><span class="line">            copyfile(label_path, yolov5_labels_train_dir + label_name)</span><br><span class="line">    <span class="keyword">else</span>:  # test dataset</span><br><span class="line">        <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(annotation_path):</span><br><span class="line">            test_file.<span class="keyword">write</span>(image_path + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            convert_annotation(nameWithoutExtention)  # convert label</span><br><span class="line">            copyfile(image_path, yolov5_images_test_dir + voc_path)</span><br><span class="line">            copyfile(label_path, yolov5_labels_test_dir + label_name)</span><br><span class="line"></span><br><span class="line">train_file.<span class="keyword">close</span>()</span><br><span class="line">test_file.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><p>上面代码放在哪个位置看你自己，由于有些目录是相对位置，所以如果不想改也跟我一样放在 datasets 中。执行完上面代码后会在 datasets 下生成 images 和 labels 两个目录，而且特别注意的是这两个目录名最好就是也是这样，比如在上面代码改了生成名，在后面训练的时候，会提示找不到 labels 目录。当然也可以修改 YOLO 提供源码的 dataset.py，看个人选择，而且 images 里的 train 和 val 需要配置到 data 的 yaml 中，这个马上就会说。<br><img src="https://image-static.segmentfault.com/290/641/290641633-3b1075790a728fd3_fix732" alt="图片"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="数据集配置"><a href="#数据集配置" class="headerlink" title="数据集配置"></a>数据集配置</h4><p>该默认文件位于项目的 data&#x2F;coco128.yaml，现在我们进行划分了数据集和自己的目标种类，当然要对其进行重新配置。最好的方法就是复制一份 coco128 然后修改名称，如下面 coco128_pocker.yaml 是我的配置示例。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">train: D:\<span class="number">3</span><span class="keyword">code</span>\<span class="number">6</span>pytorch\opencv_demo\<span class="number">05</span>_yolo_v5<span class="number">.6</span>\datasets\Poker\images\train  # train images (relative to <span class="string">&#x27;path&#x27;</span>) <span class="number">128</span> images</span><br><span class="line">val: D:\<span class="number">3</span><span class="keyword">code</span>\<span class="number">6</span>pytorch\opencv_demo\<span class="number">05</span>_yolo_v5<span class="number">.6</span>\datasets\Poker\images\val  # val images (relative to <span class="string">&#x27;path&#x27;</span>) <span class="number">128</span> images</span><br><span class="line"></span><br><span class="line"># Classes</span><br><span class="line">nc: <span class="number">6</span>  # number <span class="keyword">of</span> classes</span><br><span class="line">names: [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;queen&quot;</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;ace&quot;</span>]  # <span class="keyword">class</span> names</span><br><span class="line"></span><br><span class="line"># Download script/URL (optional)</span><br><span class="line">download: https:<span class="comment">//ultralytics.com/assets/coco128.zip</span></span><br></pre></td></tr></table></figure><h4 id="模型配置"><a href="#模型配置" class="headerlink" title="模型配置"></a>模型配置</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">该默认文件位于项目的 model 下，然后选择自己的场景，如我用的是 v5s 同样就复制一份重命名。这个文件主要是定义模型的基本机构和参数，比如分类数目 nc，模型深度倍数 depth_multiple，每层通道数倍数 width_multiple，以及目标框的大小和比例的 anchors。在刚使用 <span class="symbol">YOLO</span> 的话，我们就改个 nc 就可以，后面再研究这些参数的用法，下面是 yolov5s_pocker.yaml 的示例。</span><br><span class="line"># <span class="symbol">Parameters</span></span><br><span class="line">nc: <span class="number">6</span>  # number of classes</span><br><span class="line">depth_multiple: <span class="number">0.33</span>  # model depth multiple</span><br><span class="line">width_multiple: <span class="number">0.50</span>  # layer channel multiple</span><br><span class="line">anchors:</span><br><span class="line">  - [<span class="number">10</span>,<span class="number">13</span>, <span class="number">16</span>,<span class="number">30</span>, <span class="number">33</span>,<span class="number">23</span>]  # <span class="symbol">P3</span>/<span class="number">8</span></span><br><span class="line">  - [<span class="number">30</span>,<span class="number">61</span>, <span class="number">62</span>,<span class="number">45</span>, <span class="number">59</span>,<span class="number">119</span>]  # <span class="symbol">P4</span>/<span class="number">16</span></span><br><span class="line">  - [<span class="number">116</span>,<span class="number">90</span>, <span class="number">156</span>,<span class="number">198</span>, <span class="number">373</span>,<span class="number">326</span>]  # <span class="symbol">P5</span>/<span class="number">32</span></span><br><span class="line"></span><br><span class="line"># <span class="symbol">YOLOv5</span> v6<span class="number">.0</span> backbone</span><br><span class="line">backbone:</span><br><span class="line">  # [from, number, module, args]</span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">64</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>]],  # <span class="number">0</span>-<span class="symbol">P1</span>/<span class="number">2</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">1</span>-<span class="symbol">P2</span>/<span class="number">4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">128</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">3</span>-<span class="symbol">P3</span>/<span class="number">8</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">6</span>, <span class="symbol">C3</span>, [<span class="number">256</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">5</span>-<span class="symbol">P4</span>/<span class="number">16</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">9</span>, <span class="symbol">C3</span>, [<span class="number">512</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">7</span>-<span class="symbol">P5</span>/<span class="number">32</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">1024</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">SPPF</span>, [<span class="number">1024</span>, <span class="number">5</span>]],  # <span class="number">9</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"># <span class="symbol">YOLOv5</span> v6<span class="number">.0</span> head</span><br><span class="line">head:</span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, nn.<span class="symbol">Upsample</span>, [<span class="symbol">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">6</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat backbone <span class="symbol">P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">512</span>, <span class="symbol">False</span>]],  # <span class="number">13</span></span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, nn.<span class="symbol">Upsample</span>, [<span class="symbol">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat backbone <span class="symbol">P3</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">256</span>, <span class="symbol">False</span>]],  # <span class="number">17</span> (<span class="symbol">P3</span>/<span class="number">8</span>-small)</span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">14</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat head <span class="symbol">P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">512</span>, <span class="symbol">False</span>]],  # <span class="number">20</span> (<span class="symbol">P4</span>/<span class="number">16</span>-medium)</span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">10</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat head <span class="symbol">P5</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">1024</span>, <span class="symbol">False</span>]],  # <span class="number">23</span> (<span class="symbol">P5</span>/<span class="number">32</span>-large)</span><br><span class="line"></span><br><span class="line">   [[<span class="number">17</span>, <span class="number">20</span>, <span class="number">23</span>], <span class="number">1</span>, <span class="symbol">Detect</span>, [nc, anchors]],  # <span class="symbol">Detect</span>(<span class="symbol">P3</span>, <span class="symbol">P4</span>, <span class="symbol">P5</span>)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h4 id="权重文件"><a href="#权重文件" class="headerlink" title="权重文件"></a>权重文件</h4><p>这个就是我们从 yolo 开源那里下载的 yolov5s.pt，这里面有 80 个类目的检测，在基础识别时候可以直接用它。而训练自己的目标也需要基于他的权重再进行训练，所以可以在项目中创建一个 weights，然后再将 yolov5s.pt 放到其中。<br><img src="https://image-static.segmentfault.com/307/858/3078581037-6548ba01554ac490_fix732" alt="图片"></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><h4 id="基础预测"><a href="#基础预测" class="headerlink" title="基础预测"></a>基础预测</h4><p>在训练目标模型前，可以先试试以前的基础检测，这里我们可以随便拿一张图放到 data&#x2F;images 下，然后执行下面命令，根目录下会生成 runs，而 runs 下的 detect 会根据每次执行的次数生成不同次的标注结果。python detect.py –weights weights&#x2F;yolov5s.pt –source data&#x2F;images&#x2F;zidane.jpg<br><img src="https://image-static.segmentfault.com/341/590/3415904343-40e9fd1c19ead227_fix732" alt="图片"></p><h4 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">source: 需要进行检测的图片或视频的文件位置</span><br><span class="line">weigths: 指的是训练好的网络模型，用来初始化网络权重</span><br><span class="line">cfg：为configuration的缩写，指的是网络结构，一般对应models文件夹下的xxx.yaml文件</span><br><span class="line"><span class="keyword">data</span>：训练数据路径，一般为<span class="keyword">data</span>文件夹下的xxx.yaml文件</span><br><span class="line">epochs：设置训练的轮数（自己电脑上一般建议先小一点，测试一下，看跑一轮要多久）</span><br><span class="line">batch-<span class="built_in">size</span>：每次输出给神经网络的图片数，（需要根据自己电脑性能进行调整）</span><br><span class="line">img-<span class="built_in">size</span>：用于分别设置训练集和测试集的大小。两个数字前者为训练集大小，后者为测试集大小</span><br><span class="line">image-weights：测试过程中，图像的那些测试地方不太好，对这些不太好的地方加权重</span><br><span class="line">device：训练网络的设备cpu还是gpu</span><br><span class="line">multi-<span class="built_in">scale</span>：训练过程中对图片进行尺度变换</span><br><span class="line">workers: 多线程训练</span><br><span class="line">label-smoothing： 对标签进行平滑处理，防止过拟合</span><br></pre></td></tr></table></figure><h4 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h4><p>以下是我踩过坑后执行的命令，因为当时我用 CPU 训练一轮要 7 分钟就改成了 GPU，加了 –device 0 后速度快了 4 倍。batch-size 为 2，这么小是因为我的显卡 750Ti 显存只有 2G，就暂时用了这个数值。而加了 –workers 0，也是因为有坑，这个后面再说。训练完成后，会在根目录的 runs&#x2F;train 下生成每次运行的权重文件和损失准确示例图等，其中 weights 下的 best.pt 和 last.pt，分别表示本轮训练最好的权重和最新的权重。<br>python train.py –weights weights&#x2F;yolov5s.pt –cfg models&#x2F;yolov5s_pocker.yaml –data data&#x2F;coco128_pocker.yaml –epochs 1 –batch-size 2 –multi-scale –device 0 –workers 0<br><img src="https://image-static.segmentfault.com/354/272/3542721148-cbbce6058bb70092_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/255/417/2554173645-f5d7f1dcd2c61b74_fix732" alt="图片"></p><h3 id="开始检测"><a href="#开始检测" class="headerlink" title="开始检测"></a>开始检测</h3><p>训练完成后，我们可以把本轮的 best.pt 放到根目录的 weights 下，以下是不同检测方式的命令，可以分别都试一下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 图片</span><br><span class="line">python detect<span class="selector-class">.py</span>  <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/cam_image16<span class="selector-class">.jpg</span></span><br><span class="line"><span class="number">2</span>. 视频</span><br><span class="line">python detect<span class="selector-class">.py</span>  <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/test<span class="selector-class">.mov</span></span><br><span class="line"><span class="number">3</span>. 使用cuda测试</span><br><span class="line">python detect<span class="selector-class">.py</span> <span class="attr">--device</span> <span class="number">0</span> <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/IMG_2681.JPG</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/154/622/1546221456-7bf1202145704a9f_fix732" alt="图片"></p><h3 id="detect-py-重写"><a href="#detect-py-重写" class="headerlink" title="detect.py 重写"></a>detect.py 重写</h3><p>因为在实际项目中，我们对图片和视频的目标检测，更多的可能是通过前端传递过来的图片或视频，模型给出的是预测的类目名称和目标的位置，而不是直接生成标注的图片和视频。所以我对 demo 提供的 detect 进行了简单的修改，修改结果就是前面放出的图片，不过还是采用命令方式，当然也可以直接改成接口，最后就是如果需要代码的可以评论区留言哈。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">import warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">import argparse</span><br><span class="line"><span class="keyword">from</span> utils.datasets import *</span><br><span class="line"><span class="keyword">from</span> utils.torch_utils import *</span><br><span class="line"><span class="keyword">from</span> utils.augmentations import *</span><br><span class="line"><span class="keyword">from</span> utils.general import *</span><br><span class="line"><span class="keyword">from</span> models.common import DetectMultiBackend</span><br><span class="line"><span class="keyword">from</span> utils.plots import Annotator, colors, save_one_box</span><br><span class="line">import time</span><br><span class="line">import cv2</span><br><span class="line">import torch</span><br><span class="line">import random</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def detect(<span class="attribute">save_img</span>=<span class="literal">False</span>):</span><br><span class="line">    # 解析配置参数</span><br><span class="line">    source, weights, data, imgsz = opt.source, opt.weights, opt.data, opt.img_size</span><br><span class="line"></span><br><span class="line">    # 初始化 模型推理硬件</span><br><span class="line">    device = select_device(opt.device)</span><br><span class="line">    model = DetectMultiBackend(weights, <span class="attribute">device</span>=device, <span class="attribute">dnn</span>=<span class="literal">False</span>, <span class="attribute">data</span>=data)</span><br><span class="line">    stride, names, pt, jit, onnx, engine = model.stride, model.names, model.pt, model.jit, model.onnx, model.engine</span><br><span class="line">    imgsz = check_img_size(imgsz, <span class="attribute">s</span>=stride)</span><br><span class="line"></span><br><span class="line">    dataset = LoadImages(source, <span class="attribute">img_size</span>=imgsz, <span class="attribute">stride</span>=stride, <span class="attribute">auto</span>=pt)</span><br><span class="line"></span><br><span class="line">    dt, seen = [0.0, 0.0, 0.0], 0</span><br><span class="line">    <span class="keyword">for</span> path, im, im0s, vid_cap, s <span class="keyword">in</span> dataset:</span><br><span class="line">        t1 = time_sync()</span><br><span class="line">        # im = torch.from_numpy(im).<span class="keyword">to</span>(device)</span><br><span class="line">        im = torch.from_numpy(im.astype(np.float32)).<span class="keyword">to</span>(device)</span><br><span class="line">        im /= 255  # 0 - 255 <span class="keyword">to</span> 0.0 - 1.0</span><br><span class="line">        <span class="keyword">if</span> len(im.shape) == 3:</span><br><span class="line">            im = im[None]  # expand <span class="keyword">for</span> batch dim</span><br><span class="line">        t2 = time_sync()</span><br><span class="line">        dt[0] += t2 - t1</span><br><span class="line"></span><br><span class="line">        dt[0] += t2 - t1</span><br><span class="line"></span><br><span class="line">        # Inference</span><br><span class="line">        # visualize = increment_path(save_dir / Path(path).stem, <span class="attribute">mkdir</span>=<span class="literal">True</span>) <span class="keyword">if</span> visualize <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        pred = model(im)</span><br><span class="line">        t3 = time_sync()</span><br><span class="line">        dt[1] += t3 - t2</span><br><span class="line"></span><br><span class="line">        # NMS</span><br><span class="line">        pred = non_max_suppression(pred, 0.25, 0.45, None, <span class="literal">False</span>, <span class="attribute">max_det</span>=1000)</span><br><span class="line">        dt[2] += time_sync() - t3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, det <span class="keyword">in</span> enumerate(pred):</span><br><span class="line">            p, s, im0 = source, <span class="string">&#x27;&#x27;</span>, im0s</span><br><span class="line"></span><br><span class="line">            # <span class="built_in">print</span>(<span class="string">&#x27;im0_shape：&#x27;</span>, im0.shape)</span><br><span class="line"></span><br><span class="line">            s += <span class="string">&#x27;%gx%g &#x27;</span> % im.shape[2:]  # <span class="built_in">print</span> string</span><br><span class="line">            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  #  normalization gain whwh</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> det is <span class="keyword">not</span> None <span class="keyword">and</span> len(det):</span><br><span class="line">                # 推理的图像分辨率转为原图分辨率：Rescale boxes <span class="keyword">from</span> img_size <span class="keyword">to</span> im0 size</span><br><span class="line">                det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()</span><br><span class="line"></span><br><span class="line">                # <span class="built_in">Print</span> results</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> det[:, -1].unique():</span><br><span class="line">                    n = (det[:, -1] == c).sum()  # detections per class</span><br><span class="line">                    s += <span class="string">&#x27;%g %ss, &#x27;</span> % (n, names[int(c)])  # <span class="built_in">add</span> <span class="keyword">to</span> string</span><br><span class="line"></span><br><span class="line">                # Write results</span><br><span class="line">                output_dict_ = []</span><br><span class="line">                <span class="keyword">for</span> *xyxy, conf, cls <span class="keyword">in</span> det:</span><br><span class="line">                    x1, y1, x2, y2 = xyxy</span><br><span class="line">                    output_dict_.append((float(x1), float(y1), float(x2), float(y2)))</span><br><span class="line">                    label = <span class="string">&#x27;%s %.2f&#x27;</span> % (names[int(cls)], conf)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;---------------------------------------------------------------------&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;尺寸：&quot;</span>, im0.shape)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;坐标：&quot;</span>, (float(x1), float(y1), float(x2), float(y2)))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;标识：&quot;</span>, label)</span><br><span class="line">                # <span class="built_in">print</span>(<span class="string">&quot;output_dict_ : &quot;</span>, output_dict_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;weights/yolov5s.pt&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;model.pt path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;data/coco128_pocker.yaml&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;dataset.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--source&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&quot;./video/1.mp4&quot;</span>, <span class="attribute">help</span>=<span class="string">&#x27;source&#x27;</span>)  # file/folder, 0 <span class="keyword">for</span> webcam</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--img-size&#x27;</span>, <span class="attribute">type</span>=int, <span class="attribute">default</span>=640, <span class="attribute">help</span>=<span class="string">&#x27;inference size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf-thres&#x27;</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.31, <span class="attribute">help</span>=<span class="string">&#x27;object confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou-thres&#x27;</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.45, <span class="attribute">help</span>=<span class="string">&#x27;IOU threshold for NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--fourcc&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;mp4v&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;output video codec (verify ffmpeg support)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, <span class="attribute">default</span>=<span class="string">&#x27;&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, <span class="attribute">nargs</span>=<span class="string">&#x27;+&#x27;</span>, <span class="attribute">type</span>=int, <span class="attribute">help</span>=<span class="string">&#x27;filter by class&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--agnostic-nms&#x27;</span>, <span class="attribute">action</span>=<span class="string">&#x27;store_true&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;class-agnostic NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--augment&#x27;</span>, <span class="attribute">default</span>=<span class="literal">False</span>, <span class="attribute">help</span>=<span class="string">&#x27;augmented inference&#x27;</span>)</span><br><span class="line">    opt = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(opt)  # 打印输入配置参数</span><br><span class="line"></span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        detect(<span class="attribute">save_img</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实年初的时候，我也跟着别人的源码，用 Tensoflow 实现过扑克牌的目标检测。虽然也通过博文的方式记录了，但是那个项目使用的 TF 版</summary>
      
    
    
    
    <category term="人工智能" scheme="http://z11r00.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="计算机视觉" scheme="http://z11r00.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>如何将 Python 项目打包成 exe，另带卸载功能！</title>
    <link href="http://z11r00.github.io/2024/05/30/%E5%A6%82%E4%BD%95%E5%B0%86%20Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90%20exe%EF%BC%8C%E5%8F%A6%E5%B8%A6%E5%8D%B8%E8%BD%BD%E5%8A%9F%E8%83%BD%EF%BC%81/"/>
    <id>http://z11r00.github.io/2024/05/30/%E5%A6%82%E4%BD%95%E5%B0%86%20Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90%20exe%EF%BC%8C%E5%8F%A6%E5%B8%A6%E5%8D%B8%E8%BD%BD%E5%8A%9F%E8%83%BD%EF%BC%81/</id>
    <published>2024-05-30T11:13:50.000Z</published>
    <updated>2024-06-01T03:59:01.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我是做 web 的，但是对 Python 的众多开源项目一直都很关注。像之前的 stable diffusion 的 AI 绘画，和 so-vits-svc 音色替换等源码的部署文档都很完善了。尽管如此，对于刚入门的和本地环境搭建各种踩坑的同学，又急于一试就显得不太友好了。针对这一现象，网上早有了各种大佬做了一键部署的解决方案，不用安装 Python 环境，不用下载各种依赖包，点一下 exe 就可以用了。    </p><p>那他们是怎么做的呢，到这里应该已经很多人会说用 pyinstaller。是的这个确实可以解决整体环境打包，但是有时候一些图标和依赖文件要放在一起才能正常使用，类似于绿色桌面工具。那有没有方法对这个进一步封装，就是点击 exe 后需要安装，然后安装后才是项目的文件，还可以卸载，答案就是用 Inno Setup Compiler。那么，接下来我就用一个 GUI 的小 demo 完成 exe 打包和进一步安装打包。<br><img src="https://image-static.segmentfault.com/279/444/2794446223-f02b7a7b73003e25_fix732" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Python 3.8<br>Tkinter (自带)<br>pyinstaller 6.3.0<br>Inno Setup Compiler </p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>用 conda 单独创建一虚拟环境，比如写一个 tkinter 应用，对了为了好看，我们可以设置以下 icon，尺寸 32x32，大图标 64x64 准备一下即可。然后用 pyinstaller 将应用达成文件包 (含 exe)，最后用 Inno Setup Compiler 达成安装包，里面就是各种文件关联，图标和信息的设置了。<br><img src="https://image-static.segmentfault.com/144/031/144031524-21473df23511ccdb_fix732" alt="图片"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建环境</span></span><br><span class="line"><span class="attribute">conda</span> create -n tools_env python=<span class="number">3</span>.<span class="number">8</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 进入环境</span></span><br><span class="line"><span class="attribute">conda</span> activate tools_env</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3. 安装 pyinstaller</span></span><br><span class="line"><span class="attribute">pip</span> install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h4 id="编码示例"><a href="#编码示例" class="headerlink" title="编码示例"></a>编码示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"><span class="keyword">from</span> tkinter import ttk</span><br><span class="line"><span class="keyword">from</span> tkinter import messagebox</span><br><span class="line"><span class="keyword">from</span> ToolTip import ToolTip</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Application(tk.Tk):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.title(<span class="string">&quot;公众号：ZERO开发&quot;</span>)</span><br><span class="line">        self.iconbitmap(<span class="string">&#x27;logo.ico&#x27;</span>)</span><br><span class="line">        self.geometry(<span class="string">&quot;600x370&quot;</span>)  # 设置固定的窗口大小</span><br><span class="line">        self.resizable(<span class="literal">False</span>, <span class="literal">False</span>)  # 禁止调整窗口大小</span><br><span class="line">        self.style = ttk.Style(self)</span><br><span class="line">        self.main_color = self.cget(<span class="string">&quot;bg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TEntry&quot;</span>,</span><br><span class="line">                             <span class="attribute">padding</span>=6,</span><br><span class="line">                             <span class="attribute">relief</span>=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">                             <span class="attribute">background</span>=<span class="string">&quot;#0078d7&quot;</span>,</span><br><span class="line">                             <span class="attribute">foreground</span>=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TLabel&quot;</span>,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TButton&quot;</span>,</span><br><span class="line">                             <span class="attribute">padding</span>=6,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12))</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line"></span><br><span class="line">    def create_widgets(self):</span><br><span class="line">        self.path_label = ttk.Label(self, <span class="attribute">text</span>=<span class="string">&#x27;绝对路径:&#x27;</span>)</span><br><span class="line">        self.path_label.grid(<span class="attribute">row</span>=0, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=30, <span class="attribute">padx</span>=20)</span><br><span class="line"></span><br><span class="line">        self.path = tk.StringVar()</span><br><span class="line">        self.path_entry = ttk.Entry(self, <span class="attribute">width</span>=60, <span class="attribute">textvariable</span>=self.path)</span><br><span class="line">        self.path_entry.grid(<span class="attribute">row</span>=0, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.E, <span class="attribute">pady</span>=5)</span><br><span class="line">        ToolTip(self.path_entry, <span class="string">&quot;电脑里的目录路径，如 D:\\3code\\6pytorch\pytorch_ai_demo&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.rename_label = ttk.Label(self, <span class="attribute">text</span>=<span class="string">&#x27;修改名称:&#x27;</span>)</span><br><span class="line">        self.rename_label.grid(<span class="attribute">row</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=5, <span class="attribute">padx</span>=20)</span><br><span class="line"></span><br><span class="line">        self.rename = tk.StringVar()</span><br><span class="line">        self.rename_entry = ttk.Entry(self, <span class="attribute">width</span>=60, <span class="attribute">textvariable</span>=self.rename)</span><br><span class="line">        self.rename_entry.grid(<span class="attribute">row</span>=1, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.E, <span class="attribute">pady</span>=5)</span><br><span class="line"></span><br><span class="line">        self.msg_text = tk.Text(self, <span class="attribute">height</span>=2, <span class="attribute">width</span>=60, <span class="attribute">wrap</span>=<span class="string">&#x27;none&#x27;</span>)  # 添加一个列表框来显示文件名</span><br><span class="line">        self.msg_text.grid(<span class="attribute">row</span>=2, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=15)</span><br><span class="line">        self.msg_text.configure(<span class="attribute">bd</span>=0, <span class="attribute">relief</span>=<span class="string">&quot;solid&quot;</span>, <span class="attribute">bg</span>=self.main_color)</span><br><span class="line">        # self.msg_text.insert(tk.END, <span class="string">&quot;这是要显示的文本。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ttk.Button(self, <span class="attribute">text</span>=<span class="string">&#x27;确认修改&#x27;</span>, <span class="attribute">command</span>=self.start_program).grid(row=3, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=20, <span class="attribute">padx</span>=120)</span><br><span class="line">        ttk.Button(self, <span class="attribute">text</span>=<span class="string">&#x27;关于作者&#x27;</span>, <span class="attribute">command</span>=self.about).grid(row=4, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">padx</span>=120)</span><br><span class="line"></span><br><span class="line">    def start_program(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;绝对路径：&#123;&#125;, 重命名：&#123;&#125;&quot;</span>. format(self.path.<span class="built_in">get</span>(), self.rename.<span class="built_in">get</span>()))</span><br><span class="line"></span><br><span class="line">        path = self.path.<span class="built_in">get</span>()</span><br><span class="line">        rename = self.rename.<span class="built_in">get</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> path == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> rename == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;输入框不能为空！&quot;</span>)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path) == <span class="literal">False</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;绝对路径不正确！&quot;</span>)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        i = 0</span><br><span class="line">        # <span class="string">&#x27;该文件夹下所有的文件（包括文件夹）&#x27;</span></span><br><span class="line">        FileList = os.listdir(path)</span><br><span class="line"></span><br><span class="line">        # <span class="string">&#x27;遍历所有文件&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> FileList:</span><br><span class="line">            oldDirPath = os.path.join(path, files)</span><br><span class="line"></span><br><span class="line">            self.msg_text.delete(1.0, tk.END)</span><br><span class="line">            self.msg_text.insert(tk.END, oldDirPath)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;如果是文件夹则递归调用&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(oldDirPath):</span><br><span class="line">                self.start_program(oldDirPath)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;文件名&#x27;</span></span><br><span class="line">            fileName = os.path.splitext(files)[0]</span><br><span class="line">            # <span class="string">&#x27;文件扩展名&#x27;</span></span><br><span class="line">            fileType = os.path.splitext(files)[1]</span><br><span class="line">            fileType = fileType.lower()</span><br><span class="line"></span><br><span class="line">            newDirPath = os.path.join(path, rename + <span class="string">&quot;_&quot;</span> + str(i) + fileType)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;重命名&#x27;</span></span><br><span class="line">            os.rename(oldDirPath, newDirPath)</span><br><span class="line">            i += 1</span><br><span class="line"></span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;信息&quot;</span>, <span class="string">&quot;操作完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    def about(self):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;关于&quot;</span>, <span class="string">&quot;微信公众号：ZERO开发\r\n\r\n工具：批量修改文件1.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    def quit_program(self):</span><br><span class="line">        self.destroy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = Application()</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure><h4 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h4><p>pyinstaller -F -w Application.py -–icon&#x3D;logo.ico<br><img src="https://image-static.segmentfault.com/215/637/2156373440-5904f0f705ce1152_fix732" alt="图片"><br>这里我们希望打包是自己的图标就带上 icon，而且打开时不要出现黑色闪框就带上 w，当然后面打开 exe 要把 icon 放到与他同一级的目录中，尺寸上面已经说了，下面是参数说明。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：    </span><br><span class="line"><span class="deletion">-–icon=图标路径</span></span><br><span class="line"><span class="deletion">-F 打包成一个exe文件</span></span><br><span class="line"><span class="deletion">-w 使用窗口，无控制台</span></span><br><span class="line"><span class="deletion">-c 使用控制台，无窗口</span></span><br><span class="line"><span class="deletion">-D 创建一个目录，里面包含exe以及其他一些依赖性文件</span></span><br></pre></td></tr></table></figure><p>还有一个问题是，如果是修改了代码，需要反复多次打包，可以把项目前一次打包生成的生成的 spec 后缀文件删除即可。打包成功后，控制面包会显示 Building EXE from EXE-00.toc completed successfully，然后根目录的 dist 就是打包后的文件包，里面需要的文件图片等都在里面，后面用 Inno Setup Compiler 也就是对这个文件夹打包。<br><img src="https://image-static.segmentfault.com/346/065/3460652742-40f3b853ed65482b_fix732" alt="图片"><br><img src="https://segmentfault.com/img/remote/1460000044486411" alt="图片"></p><h4 id="Inno-Setup-Compiler-操作"><a href="#Inno-Setup-Compiler-操作" class="headerlink" title="Inno Setup Compiler 操作"></a>Inno Setup Compiler 操作</h4><p>新建脚本，填写信息</p><p><img src="https://image-static.segmentfault.com/253/032/2530320731-e84a5e5078cc75bf_fix732" alt="图片"></p><p>选择主程序和需要的文件</p><p><img src="https://image-static.segmentfault.com/191/164/1911642914-f83b2079c5a5559d_fix732" alt="图片"></p><p>设置名称和 icon</p><p><img src="https://image-static.segmentfault.com/146/108/1461087550-556de6402714ff46_fix732" alt="图片"></p><p>选择导出位置 (前面还有协议等设置)</p><p><img src="https://image-static.segmentfault.com/168/158/168158026-7abe4b306413d623_fix732" alt="图片"></p><p>运行脚本开始生成</p><p><img src="https://image-static.segmentfault.com/253/508/253508023-7ed276ac293ec822_fix732" alt="图片"></p><p>安装打开，安装目录里有自带卸载程序</p><p><img src="https://image-static.segmentfault.com/368/896/3688964355-546d3f70e917260d_fix732" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然我是做 web 的，但是对 Python 的众多开源项目一直都很关注。像之前的 stable diffusion 的 AI 绘画，和 s</summary>
      
    
    
    
    <category term="Python开发" scheme="http://z11r00.github.io/categories/Python%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="桌面应用开发" scheme="http://z11r00.github.io/tags/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何用 Python 实现一个 “系统声音” 的实时律动挂件</title>
    <link href="http://z11r00.github.io/2024/05/30/%E5%A6%82%E4%BD%95%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20%E2%80%9C%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E2%80%9D%20%E7%9A%84%E5%AE%9E%E6%97%B6%E5%BE%8B%E5%8A%A8%E6%8C%82%E4%BB%B6/"/>
    <id>http://z11r00.github.io/2024/05/30/%E5%A6%82%E4%BD%95%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20%E2%80%9C%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E2%80%9D%20%E7%9A%84%E5%AE%9E%E6%97%B6%E5%BE%8B%E5%8A%A8%E6%8C%82%E4%BB%B6/</id>
    <published>2024-05-30T10:13:50.000Z</published>
    <updated>2024-05-31T02:38:43.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应该是三年前，我用 Esp8266 和 ws2812 实现了一个音乐律动灯带。就是电脑播放音乐时，灯带会随着系统内部音乐播放的频率而闪动不同色彩的灯珠。而当时用来监听系统声音的工具是一个博主提供的，除了实时采集声音外还通过 UDP 传递数据到 Esp8266 上。</p><p>而这次，我就自己用 Python 实现一下，不过不传数据，就采集后直接实时地在电脑上绘制波形动画，主要是用来作为 FL Studio 播放时的一个桌面小挂件。<br><img src="https://image-static.segmentfault.com/427/679/4276797434-0949231c1860f960" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>python3.8</p></li><li><p>pyaudio0.2.14</p></li><li><p>matplotlib<br><img src="https://image-static.segmentfault.com/264/586/264586738-951598ea57acb56b_fix732" alt="图片"></p><h2 id="pyaudio-简介"><a href="#pyaudio-简介" class="headerlink" title="pyaudio 简介"></a>pyaudio 简介</h2><p>pyaudio 是一个跨平台地音频 I&#x2F;O 库，使用他可以在 Python 程序中进行播放，录音和生成 wav 文件等。需要注意的是，如果要使用 pyaudio 时，python 的版本最好在 3.7 以上，不然 pip 安装会报错。因为以下例子是获取系统内部声音，而 pyaudio 读取的音频流默认是麦克风，所以接下来介绍一下关于获取的设备列表信息。</p><h4 id="代码获取设备列表"><a href="#代码获取设备列表" class="headerlink" title="代码获取设备列表"></a>代码获取设备列表</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pyaudio实例</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line"><span class="comment"># 获取设备总数</span></span><br><span class="line">device_count = audio.get_device_count()</span><br><span class="line"><span class="comment"># 根据设备索引获取设备详细信息</span></span><br><span class="line">for i in range(p.get_device_count()):</span><br><span class="line">  devInfo = p.get_device_info_by_index(i)</span><br><span class="line">  print(devInfo)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/312/429/3124297982-d02f63aeed4d1257_fix732" alt="图片"></p><h4 id="设备信息参数介绍"><a href="#设备信息参数介绍" class="headerlink" title="设备信息参数介绍"></a>设备信息参数介绍</h4></li><li><p>index: 设备的索引号，通常用于标识系统中的设备顺序。</p></li><li><p>structVersion: 结构版本号，用于表示这个数据结构的版本。</p></li><li><p>name: 设备的名称，这里是 “Microsoft 声音映射器 - Input”。</p></li><li><p>hostApi: 主 API 的标识符，通常用于表示该设备属于哪个 API 或系统。</p></li><li><p>maxInputChannels: 设备支持的最大输入通道数，这里是 2，表示设备支持 2 个输入通道。</p></li><li><p>maxOutputChannels: 设备支持的最大输出通道数，这里为 0，表示该设备没有输出通道。</p></li><li><p>defaultLowInputLatency: 默认的低输入延迟，以秒为单位，这里是 0.09 秒。</p></li><li><p>defaultLowOutputLatency: 默认的低输出延迟，这里是 0.09 秒。</p></li><li><p>defaultHighInputLatency: 默认的高输入延迟，这里是 0.18 秒。</p></li><li><p>defaultHighOutputLatency: 默认的高输出延迟，这里是 0.18 秒。</p></li><li><p>defaultSampleRate: 默认的采样率，这里是 44100.0 赫兹，这是 CD 质量的音频标准采样率。<br><img src="https://image-static.segmentfault.com/630/858/63085841-88f7b48856a39313_fix732" alt="图片"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="开启立体声混音权限"><a href="#开启立体声混音权限" class="headerlink" title="开启立体声混音权限"></a>开启立体声混音权限</h4><p>打开电脑设置 - 系统 - 声音 - 管理声音设备 - 立体声混响，点击启用。<br><img src="https://image-static.segmentfault.com/685/561/685561159-83a23b72ed13e8ba_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/146/378/1463783907-c6df507dcbfa73cf_fix732" alt="图片"></p><h4 id="设置设备索引号"><a href="#设置设备索引号" class="headerlink" title="设置设备索引号"></a>设置设备索引号</h4><p>打开立体声混音后，通过 pyaudio 获取设备列表，找到带有 “立体声混音” 的名称，和 hostApi 为 0 的，hostAPI &#x3D; 0 表明是 MME 设备。然后拿到该设备索引号，打开音频流时指定该内录设备序号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalRecordingDevice</span>(<span class="params">p</span>):</span><br><span class="line">  <span class="comment"># 要找查的设备名称中的关键字</span></span><br><span class="line">  target = <span class="string">&#x27;立体声混音&#x27;</span></span><br><span class="line">  <span class="comment"># 逐一查找声音设备</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p.get_device_count()):</span><br><span class="line">      devInfo = p.get_device_info_by_index(i)</span><br><span class="line">      <span class="built_in">print</span>(devInfo)</span><br><span class="line">      <span class="keyword">if</span> devInfo[<span class="string">&#x27;name&#x27;</span>].find(target) &gt;= <span class="number">0</span> <span class="keyword">and</span> devInfo[<span class="string">&#x27;hostApi&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">          <span class="comment"># print(&#x27;已找到内录设备,序号是 &#x27;,i)</span></span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;无法找到内录设备!&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"></span><br><span class="line">FORMAT = pyaudio.paInt16</span><br><span class="line">CHANNELS = <span class="number">1</span>  </span><br><span class="line">RATE = <span class="number">44100</span>  </span><br><span class="line">CHUNK = <span class="number">4096</span>  </span><br><span class="line"><span class="comment"># CHUNK = 1024  </span></span><br><span class="line">WAVE_OUTPUT_FILENAME = <span class="string">&#x27;audio_output.wav&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内录设备序号,在windows操作系统上测试通过，hostAPI = 0 表明是MME设备</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalRecordingDevice</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="comment"># 要找查的设备名称中的关键字</span></span><br><span class="line">    target = <span class="string">&#x27;立体声混音&#x27;</span></span><br><span class="line">    <span class="comment"># 逐一查找声音设备</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p.get_device_count()):</span><br><span class="line">        devInfo = p.get_device_info_by_index(i)</span><br><span class="line">        <span class="built_in">print</span>(devInfo)</span><br><span class="line">        <span class="keyword">if</span> devInfo[<span class="string">&#x27;name&#x27;</span>].find(target) &gt;= <span class="number">0</span> <span class="keyword">and</span> devInfo[<span class="string">&#x27;hostApi&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># print(&#x27;已找到内录设备,序号是 &#x27;,i)</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无法找到内录设备!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;应该是三年前，我用 Esp8266 和 ws2812 实现了一个音乐律动灯带。就是电脑播放音乐时，灯带会随着系统内部音乐播放的频率而闪动不同</summary>
      
    
    
    
    <category term="Python开发" scheme="http://z11r00.github.io/categories/Python%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="音频处理" scheme="http://z11r00.github.io/tags/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>基于 pytorch-openpose 实现 “多目标” 人体姿态估计</title>
    <link href="http://z11r00.github.io/2024/05/30/%E5%9F%BA%E4%BA%8E%20pytorch-openpose%20%E5%AE%9E%E7%8E%B0%20%E2%80%9C%E5%A4%9A%E7%9B%AE%E6%A0%87%E2%80%9D%20%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    <id>http://z11r00.github.io/2024/05/30/%E5%9F%BA%E4%BA%8E%20pytorch-openpose%20%E5%AE%9E%E7%8E%B0%20%E2%80%9C%E5%A4%9A%E7%9B%AE%E6%A0%87%E2%80%9D%20%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/</id>
    <published>2024-05-30T10:00:50.000Z</published>
    <updated>2024-05-31T11:28:55.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还记得上次通过 MediaPipe 估计人体姿态关键点驱动 3D 角色模型，虽然节省了动作 K 帧时间，但是网上还有一种似乎更方便的方法。MagicAnimate 就是其一，说是只要提供一张人物图片和一段动作视频 (舞蹈武术等)，就可以完成图片人物转视频。</p><p>于是我就去官网体验了一下，发现动作的视频长度不能超过 5 秒，当然，如果说要整长视频可以切多段处理再合成解决。主要的还是视频需要那种背景相对较纯的，不然提交表单一直报错，还有他也不能处理画面内多人物的姿态估计。<br><img src="https://p9-sign.toutiaoimg.com/tos-cn-i-axegupay5k/e9176ca25f5a49419f5e85a9ec9d5f92~noop.image?_iz=58558&from=article.pc_detail&lk3s=953192f4&x-expires=1717677039&x-signature=yACedCIQRHu20/9cXA3//3gY5Uk=" alt="图片"></p><h2 id="多目标人体姿态估计"><a href="#多目标人体姿态估计" class="headerlink" title="多目标人体姿态估计"></a>多目标人体姿态估计</h2><p>为什么我要弄多目标，其实是我有次拿了一舞团的视频用 MediaPipe 检测，发现一个画面中只能采集到一个人的动作数据。虽然齐舞可能就一套动作，其他的角色模型可以复制粘贴，但是有些编舞为了好看，伴舞也会根据节奏作不同的变化。所以说对于我用来采集舞蹈数据，这个很重要了，当然他也可以用在多人互动的 AR 游戏，或用在同时培训多人的动作规范检测等等场景。</p><p>要从单一人体检测到多人体姿态估计，开始我是打算用 YOLO 对画面中的多 Person 区块读出来，然后再将这些方块遍历交给 MediaPipe 对指定区域作人物动作节点识别。但是最后发现有现成的算法，就是 pytorch-openpose，所以果断先用这个来体验了一下。<br><img src="https://image-static.segmentfault.com/881/124/881124019-7e318e3ee86e9911_fix732" alt="图片"></p><h2 id="pytorch-openpose-简介"><a href="#pytorch-openpose-简介" class="headerlink" title="pytorch-openpose 简介"></a>pytorch-openpose 简介</h2><p>PyTorch-OpenPose 是一个基于 PyTorch 的开源库，它实现了 OpenPose 的功能，可以进行人的面部表情、躯干和四肢甚至手指的跟踪。它不仅适用于单人也适用于多人，同时具有较好的鲁棒性。要运行 PyTorch-OpenPose，需要安装支持 CUDA 的 PyTorch，以下例子有使用作者提供的预训练模型，通过拆分视频帧，绘制多人物动作线条保存图片，最后将图片合成为视频。<br><img src="https://image-static.segmentfault.com/299/647/2996476439-b4936cd61a9d4cf8_fix732" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>scikit-image</p></li><li><p>opencv-python</p></li><li><p>scipy</p></li><li><p>matplotlib</p></li><li><p>numpy<br><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-twdt4qpehh/79c5a0fd3b0e43638067cae91a6e5466~noop.image?_iz=58558&from=article.pc_detail&lk3s=953192f4&x-expires=1717677039&x-signature=SiLgy/YJilaurcPU4wYCkurW2ZY=" alt="图片"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h4 id="帧拆分绘制"><a href="#帧拆分绘制" class="headerlink" title="帧拆分绘制"></a>帧拆分绘制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> model</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">from</span> src.body <span class="keyword">import</span> Body</span><br><span class="line"><span class="keyword">from</span> src.hand <span class="keyword">import</span> Hand</span><br><span class="line"></span><br><span class="line">body_estimation = Body(<span class="string">&#x27;model/body_pose_model.pth&#x27;</span>)</span><br><span class="line">hand_estimation = Hand(<span class="string">&#x27;model/hand_pose_model.pth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Torch device: <span class="subst">&#123;torch.cuda.get_device_name()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&quot;D:/3code/6pytorch/opencv_demo/12_open_pose/11.mp4&quot;</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">640</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">indices = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  ret, oriImg = cap.read()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  candidate, subset = body_estimation(oriImg)</span><br><span class="line"></span><br><span class="line">  canvas = copy.deepcopy(oriImg)</span><br><span class="line">  canvas = util.draw_bodypose(canvas, candidate, subset)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># detect hand</span></span><br><span class="line">  hands_list = util.handDetect(candidate, subset, oriImg)</span><br><span class="line"></span><br><span class="line">  all_hand_peaks = []</span><br><span class="line">  <span class="keyword">for</span> x, y, w, is_left <span class="keyword">in</span> hands_list:</span><br><span class="line">      peaks = hand_estimation(oriImg[y:y+w, x:x+w, :])</span><br><span class="line">      peaks[:, <span class="number">0</span>] = np.where(peaks[:, <span class="number">0</span>]==<span class="number">0</span>, peaks[:, <span class="number">0</span>], peaks[:, <span class="number">0</span>]+x)</span><br><span class="line">      peaks[:, <span class="number">1</span>] = np.where(peaks[:, <span class="number">1</span>]==<span class="number">0</span>, peaks[:, <span class="number">1</span>], peaks[:, <span class="number">1</span>]+y)</span><br><span class="line">      all_hand_peaks.append(peaks)</span><br><span class="line"></span><br><span class="line">  canvas = util.draw_handpose(canvas, all_hand_peaks)</span><br><span class="line"></span><br><span class="line">  cv2.imwrite(<span class="string">&#x27;image_out/img_&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(indices), canvas)</span><br><span class="line">  indices += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;images:&quot;</span>, indices)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cv2.imshow(&#x27;demo&#x27;, canvas)#一个窗口用以显示原视频</span></span><br><span class="line">  <span class="comment"># if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;):</span></span><br><span class="line">  <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h4 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">from</span> pathlib import Path</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 将视频video_path分割成图片和音频文件，保存到save_path文件夹中</span><br><span class="line">def video2mp3_img(video_path, save_path, audio_path):</span><br><span class="line">    def <span class="built_in">video_split</span>(video_path, save_path):</span><br><span class="line">        if not os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">            os.<span class="built_in">makedirs</span>(save_path)</span><br><span class="line">        cap = cv2.<span class="built_in">VideoCapture</span>(video_path)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        while True:</span><br><span class="line">            ret, frame = cap.<span class="built_in">read</span>()</span><br><span class="line">            if ret:</span><br><span class="line">                cv2.<span class="built_in">imwrite</span>(save_path + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.jpg&#x27;</span>, frame)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        cap.<span class="built_in">release</span>()</span><br><span class="line"></span><br><span class="line">    if not os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">        os.<span class="built_in">makedirs</span>(save_path)</span><br><span class="line"></span><br><span class="line">    # 视频分割</span><br><span class="line">    <span class="built_in">video_split</span>(video_path, save_path)</span><br><span class="line"></span><br><span class="line">    # 视频转音频</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125; -vn -acodec copy &#123;&#125;/audio.mp3&quot;</span>.<span class="built_in">format</span>(video_path, audio_path))</span><br><span class="line">    os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125; -q:a 0 -map a &#123;&#125;/audio.mp3&quot;</span>.<span class="built_in">format</span>(video_path, audio_path))</span><br><span class="line">    # 音频转wav</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125;/audio.mp3 &#123;&#125;/audio.wav&quot;</span>.<span class="built_in">format</span>(save_path, save_path))</span><br><span class="line"></span><br><span class="line"># 将video_imgout文件夹中的图片合成视频并且添加音频文件video_img/audio.mp3</span><br><span class="line">def <span class="built_in">img2mp4</span>(image_out, save_name):</span><br><span class="line"></span><br><span class="line">    BASE_PATH = os.path.<span class="built_in">dirname</span>(__file__)</span><br><span class="line">    # 读取img size</span><br><span class="line">    img = cv2.<span class="built_in">imread</span>(<span class="string">&quot;&#123;&#125;/img_1.jpg&quot;</span>.<span class="built_in">format</span>(image_out))</span><br><span class="line"></span><br><span class="line">    imgInfo = img.shape</span><br><span class="line">    size = (imgInfo[<span class="number">1</span>], imgInfo[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    files = []</span><br><span class="line">    for dirpath, dirnames, filenames in os.<span class="built_in">walk</span>(image_out):</span><br><span class="line">        for filename in filenames:</span><br><span class="line">            fileName = <span class="built_in">Path</span>(os.path.<span class="built_in">join</span>(dirpath, filename))</span><br><span class="line">            files.<span class="built_in">append</span>(os.path.<span class="built_in">join</span>(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    files = [file.<span class="built_in">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) for file in files]</span><br><span class="line">    files.<span class="built_in">sort</span>(key=lambda x: <span class="built_in">int</span>(x.<span class="built_in">split</span>(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>].<span class="built_in">split</span>(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.<span class="built_in">VideoWriter_fourcc</span>(*<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">    videoWrite = cv2.<span class="built_in">VideoWriter</span>(f<span class="string">&#x27;videos/&#123;save_name&#125;.mp4&#x27;</span>, fourcc, <span class="number">25</span>, size)  # 写入对象 <span class="number">1</span> file name  <span class="number">3</span>: 视频帧率</span><br><span class="line"></span><br><span class="line">    for i in files:</span><br><span class="line">        img = cv2.<span class="built_in">imread</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        videoWrite.<span class="built_in">write</span>(img)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&#x27;videos/&#123;save_name&#125;.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    # 将video_img中的音频文件添加到视频中</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125;/videos/&#123;&#125;.mp4 -c:v copy -c:a aac -strict experimental &#123;&#125;/videos/&#123;&#125;.mp4&quot;</span>.<span class="built_in">format</span>(BASE_PATH, save_name, BASE_PATH, save_name))</span><br><span class="line"></span><br><span class="line">if __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    BASE = os.path.<span class="built_in">dirname</span>(__file__)</span><br><span class="line">    video_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;videos/yangguo.mp4&quot;</span>)  # 视频路径</span><br><span class="line">    save_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;video_img&quot;</span>)            # 拆解视频保存路径</span><br><span class="line">    audio_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;audio&quot;</span>)               # 分离音频保存路径</span><br><span class="line"></span><br><span class="line">    # 视频  ==&gt; imgs</span><br><span class="line">    # <span class="built_in">video2mp3_img</span>(video_path, save_path, audio_path)</span><br><span class="line"></span><br><span class="line">    # # imgs ==&gt; 视频</span><br><span class="line">    <span class="built_in">img2mp4</span>(<span class="string">&quot;image_out&quot;</span>, save_name=<span class="string">&#x27;ldh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/138/021/138021118-6444ad09edf84_fix732" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;还记得上次通过 MediaPipe 估计人体姿态关键点驱动 3D 角色模型，虽然节省了动作 K 帧时间，但是网上还有一种似乎更方便的方法。M</summary>
      
    
    
    
    <category term="人工智能" scheme="http://z11r00.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="计算机视觉" scheme="http://z11r00.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>后端搞 Cocos 小游戏开发的三点避坑指北</title>
    <link href="http://z11r00.github.io/2024/05/30/%E5%90%8E%E7%AB%AF%E6%90%9E%20Cocos%20%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E7%82%B9%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/"/>
    <id>http://z11r00.github.io/2024/05/30/%E5%90%8E%E7%AB%AF%E6%90%9E%20Cocos%20%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E7%82%B9%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/</id>
    <published>2024-05-30T09:30:50.000Z</published>
    <updated>2024-06-01T04:00:15.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先说一下我为什么要弄小游戏吧，首先无关工作，也无关兴趣，就只是想在副业里探索一下。没错就是做一个单机的小游戏上架到平台试一下水（薅广告费），不过说实话入局有点晚。    </p><p>早在 2019 年的时候，我也折腾过白鹭引擎还弄过小 demo，当时上架平台也简单。但是不知道为什么那时不顺手发布一下，录了个视频就没再管了（还是太年轻）。现在好了白鹭引擎倒了，而我也才意识到写文章做视频并不是我的强项。    </p><p>尽管现在大佬们都在 All in AI，但我还是把一个方向定在了小游戏上。选引擎二选一，挑了 Cocos Creator，之所以有下面的几个坑点，其根本原因是我没有系统性看他们的文档，所以记录一下以便后期捡起。</p><p><img src="https://image-static.segmentfault.com/289/491/2894911702-13ca6cc07d54a483_fix732" alt="图片"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><h3 id="脚本引入方式"><a href="#脚本引入方式" class="headerlink" title="脚本引入方式"></a>脚本引入方式</h3><p>这个问题是我在 Cocos Creator 资源管理器里，创建脚本时选的 js，而代码里却用了 import 的语法导致还排查了一段时间（离大谱），但下面的花括号还是要值得注意。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;util&#125; <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> startPanel <span class="keyword">from</span> <span class="string">&quot;./startPanel&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>使用 {} 的 import 允许你导入模块中的特定导出项，在这里是具体实例。</p></li><li><p>不使用 {} 的 import 允许你导入模块的默认导出，在这里只是类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gameManager from <span class="string">&quot;./gameManager&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; util &#125; from <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"></span><br><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">uiManager</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> game: gameManager = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@property</span>(cc.<span class="type">Node</span>)</span><br><span class="line">  ninja: cc.<span class="type">Node</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里gameManager只是类型约束</span></span><br><span class="line">  init(game: gameManager) &#123;</span><br><span class="line">      <span class="keyword">this</span>.game = game</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onLoad() &#123;</span><br><span class="line">      <span class="comment">// 这里直接使用util的静态方法</span></span><br><span class="line">      util.resize();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的相关设置"><a href="#组件的相关设置" class="headerlink" title="组件的相关设置"></a>组件的相关设置</h3><p>大部分组件的设置可以从文档里看到，如碰撞组件 BoxCollider，渲染组件里 Sprite（精灵组件设置图片等参数），但是如何要用到其自带滑块，并也用他的精灵图，位置在 internal 里（当时我找了老半天）。internal&gt;image&gt;default_progressbar_bg （进度条举例）<br><img src="https://image-static.segmentfault.com/367/995/3679952663-ac4509d619115e6f_fix732" alt="图片"></p><h3 id="音乐和音效"><a href="#音乐和音效" class="headerlink" title="音乐和音效"></a>音乐和音效</h3><h4 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h4><p>在 Main Camera 下添加一个空白节点，在该节点中添加 AudioSource 组件，Clip 就是从 assets 里拖入的 mp3 文件。最后将节点拖入脚本中（作为组件操作播放 &#x2F; 停止）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property(cc.AudioSource)</span></span><br><span class="line">bgAudio: cc.AudioSource = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.bgAudio.play();</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/376/296/3762963357-86e195dc5ef1c7cd_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/162/907/1629077713-e2945c60fa0ca937_fix732" alt="图片"></p><h4 id="添加操作音效"><a href="#添加操作音效" class="headerlink" title="添加操作音效"></a>添加操作音效</h4><p>在脚本中定义 AudioClip 属性，然后在 assets 中拖入 mp3 文件，最后在脚本中操作音效的播放与停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property(&#123;</span></span><br><span class="line"><span class="meta">  type: cc.AudioClip</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">audioWin: cc.AudioClip = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@property(&#123;</span></span><br><span class="line"><span class="meta">  type: cc.AudioClip</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">audioLose: cc.AudioClip = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">playSound(sName)&#123;</span><br><span class="line">      <span class="keyword">switch</span>(sName)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;click&quot;</span>:</span><br><span class="line">              <span class="comment">// cc.audioEngine.play(this.audioClick, false, 1);</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;win&quot;</span>:</span><br><span class="line">              cc.audioEngine.play(<span class="built_in">this</span>.audioWin, <span class="literal">false</span>, <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;lose&quot;</span>:</span><br><span class="line">              cc.audioEngine.play(<span class="built_in">this</span>.audioLose, <span class="literal">false</span>, <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><p>给游戏加了开始的背景音乐和操作音效后，用编辑器运行一切正常。但是当打包成某节小游戏或某信小游戏后，发现声音直接出不来，在我不断调试也依次报了下面一堆错误。</p></li></ul><p>cocos2d-js-min.js:1 Uncaught TypeError: this.bgAudio.play is not a function</p><p>Uncaught TypeError: this.bgAudio.play is not a functionUncaught TypeError: Cannot read properties of undefined (reading ‘playMusic’)</p><p>Uncaught TypeError: Cannot read properties of null (reading ‘play’)</p><p>cc.audioEngine 为 undefined </p><p><img src="https://image-static.segmentfault.com/466/447/466447791-12f219d0aed7c2e6_fix732" alt="图片"><br>一开始我以为是引擎版本原因，切换几次后发现根本不是，因为把代码放到相同版本下的其他项目下是正常的。最主要的是打包后报的错误真不好排查，导致在这个问题上花了很多时间。最后在比较打包后的 js 文件，才怀疑是不是有些引擎里的模块没搭建来，顺着这个思路果真是音乐音效的模块被我关了，前面我还一直以为是 this 指向那里的代码有问题。<br><img src="https://image-static.segmentfault.com/165/488/1654883427-cd9d6b6f143dd48f_fix732" alt="图片"><br>解决方法就是在构造发布下面的 “项目设置”，勾选 Audio 和 AudioSource 然后再打包就可以了。其实创建项目时，默认是全选的，但可能是我前期乱折腾去掉了几项。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>后续可能还有一些关于小游戏或 Unity 游戏制作踩坑内容，包括小游戏的证书申请和上架流程等等，如果你也玩 Cocos Creator 和 Unity3D，欢迎一起交流谈论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;先说一下我为什么要弄小游戏吧，首先无关工作，也无关兴趣，就只是想在副业里探索一下。没错就是做一个单机的小游戏上架到平台试一下水（薅广告费），</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://z11r00.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="http://z11r00.github.io/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>YOLO+SlowFast+DeepSORT 简单实现视频行为识别</title>
    <link href="http://z11r00.github.io/2024/05/30/YOLO+SlowFast+DeepSORT%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB/"/>
    <id>http://z11r00.github.io/2024/05/30/YOLO+SlowFast+DeepSORT%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB/</id>
    <published>2024-05-30T09:13:50.000Z</published>
    <updated>2024-05-31T02:41:12.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间刷短视频看到过别人用摄像头自动化监控员工上班状态，比如标注员工是不是离开了工位，在位置上是不是摸鱼。虽然是段子，但是这个是可以用识别技术实现一下，于是我在网上找，知道发现了 SlowFast，那么下面就用 SlowFast 简单测试一下视频的行为识别。<br><img src="https://image-static.segmentfault.com/257/030/2570309068-55c4e732c2eef7c0" alt="图片"></p><h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><h4 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h4><p>YOLO 是一个基于深度学习神经网络的对象识别和定位算法，前面我也用 v5s 训练了标注的扑克牌，实现了图片或视频中的点数识别，这里就跳过了。</p><h4 id="DeepSORT"><a href="#DeepSORT" class="headerlink" title="DeepSORT"></a>DeepSORT</h4><p>DeepSORT 是一个实现目标跟踪的算法，其使用卡尔曼滤波器预测所检测对象的运动轨迹。也就是当视频中有多个目标，算法能知道上一帧与下一帧各目标对象的匹配，从而完成平滑锁定，而不是在视频播放或记录时，检测框一闪一闪的。</p><h4 id="SlowFast"><a href="#SlowFast" class="headerlink" title="SlowFast"></a>SlowFast</h4><p>SlowFast 是一个行为分类模型 (pytorchvideo 内置)，可以通过输入视频序列和检测框信息，输出每个检测框的行为类别。所以需要借助类似 YOLO 的多目标检测模型，当然 SlowFast 也可以自行标注数据集训练，来完成自定义的行为识别。<br><img src="https://image-static.segmentfault.com/246/054/2460547519-37b0b46d1390da83_fix732" alt="图片"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><p>读取视频或者摄像头中的图片</p></li><li><p>通过 yolo 检测出画面的目标</p></li><li><p>通过 deep_sort 对目标进行跟踪</p></li><li><p>通过 slowfast 识别出目标的动作</p></li><li><p>根据识别的动作进行业务处理等<br><img src="https://segmentfault.com/img/remote/1460000044520460" alt="图片"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>整个流程下来，除了安装 slowfast 依赖 (pytorchvideo) 外，deep_sort 可以下载 <a href="https://link.segmentfault.com/?enc=9Iklchu9T8HTmKq3zcD2Tw==.O56EkHKoYCiiKVdF8ECJYjUxxL0qj57oCnSzfkBT4jvuRcH65qFGGa7acc/179wWqnMmeCd0D6Fk0HhyUAXgRg==">https://github.com/wufan-tb/yolo_slowfast&#x2F;tree&#x2F;master&#x2F;deep_sort</a> 然后 import 到项目中。如果要实时处理摄像头的视频，可以通过采用多线程，单独开一个线程读摄像头并一秒保存一张图，再开一个线程用于处理保存的图片，最后将处理后的结果保存为视频，或者只是做一些业务操作，以下只是一个例子。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os,cv2,time,torch,random,pytorchvideo,warnings,argparse,math</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>,category=UserWarning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pytorchvideo.transforms.functional <span class="keyword">import</span> (</span><br><span class="line">    uniform_temporal_subsample,</span><br><span class="line">    short_side_scale_with_boxes,</span><br><span class="line">    clip_boxes_to_image,)</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms._functional_video <span class="keyword">import</span> normalize</span><br><span class="line"><span class="keyword">from</span> pytorchvideo.data.ava <span class="keyword">import</span> AvaLabeledVideoFramePaths</span><br><span class="line"><span class="keyword">from</span> pytorchvideo.models.hub <span class="keyword">import</span> slowfast_r50_detection</span><br><span class="line"><span class="keyword">from</span> deep_sort.deep_sort <span class="keyword">import</span> DeepSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVideoCapture</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, source</span>):</span><br><span class="line">        self.cap = cv2.VideoCapture(source)</span><br><span class="line">        self.idx = -<span class="number">1</span></span><br><span class="line">        self.end = <span class="literal">False</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        self.idx += <span class="number">1</span></span><br><span class="line">        ret, img = self.cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            self.stack.append(img)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.end = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> ret, img</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_tensor</span>(<span class="params">self, img</span>):</span><br><span class="line">        img = torch.from_numpy(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line">        <span class="keyword">return</span> img.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_video_clip</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>, <span class="string">&quot;clip length must large than 0 !&quot;</span></span><br><span class="line">        self.stack = [self.to_tensor(img) <span class="keyword">for</span> img <span class="keyword">in</span> self.stack]</span><br><span class="line">        clip = torch.cat(self.stack).permute(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">del</span> self.stack</span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="keyword">return</span> clip</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">self</span>):</span><br><span class="line">        self.cap.release()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tensor_to_numpy</span>(<span class="params">tensor</span>):</span><br><span class="line">    img = tensor.cpu().numpy().transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ava_inference_transform</span>(<span class="params"></span></span><br><span class="line"><span class="params">    clip, </span></span><br><span class="line"><span class="params">    boxes,</span></span><br><span class="line"><span class="params">    num_frames = <span class="number">32</span>, <span class="comment">#if using slowfast_r50_detection, change this to 32, 4 for slow </span></span></span><br><span class="line"><span class="params">    crop_size = <span class="number">640</span>, </span></span><br><span class="line"><span class="params">    data_mean = [<span class="number">0.45</span>, <span class="number">0.45</span>, <span class="number">0.45</span>], </span></span><br><span class="line"><span class="params">    data_std = [<span class="number">0.225</span>, <span class="number">0.225</span>, <span class="number">0.225</span>],</span></span><br><span class="line"><span class="params">    slow_fast_alpha = <span class="number">4</span>, <span class="comment">#if using slowfast_r50_detection, change this to 4, None for slow</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    boxes = np.array(boxes)</span><br><span class="line">    roi_boxes = boxes.copy()</span><br><span class="line">    clip = uniform_temporal_subsample(clip, num_frames)</span><br><span class="line">    clip = clip.<span class="built_in">float</span>()</span><br><span class="line">    clip = clip / <span class="number">255.0</span></span><br><span class="line">    height, width = clip.shape[<span class="number">2</span>], clip.shape[<span class="number">3</span>]</span><br><span class="line">    boxes = clip_boxes_to_image(boxes, height, width)</span><br><span class="line">    clip, boxes = short_side_scale_with_boxes(clip,size=crop_size,boxes=boxes,)</span><br><span class="line">    clip = normalize(clip,</span><br><span class="line">        np.array(data_mean, dtype=np.float32),</span><br><span class="line">        np.array(data_std, dtype=np.float32),) </span><br><span class="line">    boxes = clip_boxes_to_image(boxes, clip.shape[<span class="number">2</span>],  clip.shape[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">if</span> slow_fast_alpha <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        fast_pathway = clip</span><br><span class="line">        slow_pathway = torch.index_select(clip,<span class="number">1</span>,</span><br><span class="line">            torch.linspace(<span class="number">0</span>, clip.shape[<span class="number">1</span>] - <span class="number">1</span>, clip.shape[<span class="number">1</span>] // slow_fast_alpha).long())</span><br><span class="line">        clip = [slow_pathway, fast_pathway]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> clip, torch.from_numpy(boxes), roi_boxes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_one_box</span>(<span class="params">x, img, color=[<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>], text_info=<span class="string">&quot;None&quot;</span>,</span></span><br><span class="line"><span class="params">                 velocity=<span class="literal">None</span>, thickness=<span class="number">1</span>, fontsize=<span class="number">0.5</span>, fontthickness=<span class="number">1</span></span>):</span><br><span class="line">    c1, c2 = (<span class="built_in">int</span>(x[<span class="number">0</span>]), <span class="built_in">int</span>(x[<span class="number">1</span>])), (<span class="built_in">int</span>(x[<span class="number">2</span>]), <span class="built_in">int</span>(x[<span class="number">3</span>]))</span><br><span class="line">    cv2.rectangle(img, c1, c2, color, thickness, lineType=cv2.LINE_AA)</span><br><span class="line">    t_size = cv2.getTextSize(text_info, cv2.FONT_HERSHEY_TRIPLEX, fontsize , fontthickness+<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    cv2.rectangle(img, c1, (c1[<span class="number">0</span>] + <span class="built_in">int</span>(t_size[<span class="number">0</span>]), c1[<span class="number">1</span>] + <span class="built_in">int</span>(t_size[<span class="number">1</span>]*<span class="number">1.45</span>)), color, -<span class="number">1</span>)</span><br><span class="line">    cv2.putText(img, text_info, (c1[<span class="number">0</span>], c1[<span class="number">1</span>]+t_size[<span class="number">1</span>]+<span class="number">2</span>), </span><br><span class="line">                cv2.FONT_HERSHEY_TRIPLEX, fontsize, [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>], fontthickness)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deepsort_update</span>(<span class="params">Tracker, pred, xywh, np_img</span>):</span><br><span class="line">    outputs = Tracker.update(xywh, pred[:,<span class="number">4</span>:<span class="number">5</span>],pred[:,<span class="number">5</span>].tolist(),cv2.cvtColor(np_img,cv2.COLOR_BGR2RGB))</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_yolopreds_tovideo</span>(<span class="params">yolo_preds, id_to_ava_labels, color_map, output_video, vis=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i, (im, pred) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(yolo_preds.ims, yolo_preds.pred)):</span><br><span class="line">        <span class="keyword">if</span> pred.shape[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">for</span> j, (*box, cls, trackid, vx, vy) <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(cls) != <span class="number">0</span>:</span><br><span class="line">                    ava_label = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> trackid <span class="keyword">in</span> id_to_ava_labels.keys():</span><br><span class="line">                    ava_label = id_to_ava_labels[trackid].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ava_label = <span class="string">&#x27;Unknow&#x27;</span></span><br><span class="line">                text = <span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(trackid),yolo_preds.names[<span class="built_in">int</span>(cls)],ava_label)</span><br><span class="line">                color = color_map[<span class="built_in">int</span>(cls)]</span><br><span class="line">                im = plot_one_box(box,im,color,text)</span><br><span class="line">        im = im.astype(np.uint8)</span><br><span class="line">        output_video.write(im)</span><br><span class="line">        <span class="keyword">if</span> vis:</span><br><span class="line">            cv2.imshow(<span class="string">&quot;demo&quot;</span>, im)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">config</span>):</span><br><span class="line">    device = config.device</span><br><span class="line">    imsize = config.imsize</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># model = torch.hub.load(&#x27;D:/3code/6pytorch/opencv_demo/05_yolo_v5.6&#x27;, &#x27;yolov5s&#x27;, source=&#x27;local&#x27;, pretrained=True).to(device)</span></span><br><span class="line">    model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, <span class="string">&#x27;yolov5l6&#x27;</span>).to(device)</span><br><span class="line">    model.conf = config.conf</span><br><span class="line">    model.iou = config.iou</span><br><span class="line">    model.max_det = <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> config.classes:</span><br><span class="line">        model.classes = config.classes</span><br><span class="line">    </span><br><span class="line">    video_model = slowfast_r50_detection(<span class="literal">True</span>).<span class="built_in">eval</span>().to(device)</span><br><span class="line">    </span><br><span class="line">    deepsort_tracker = DeepSort(<span class="string">&quot;deep_sort/deep_sort/deep/checkpoint/ckpt.t7&quot;</span>)</span><br><span class="line">    ava_labelnames,_ = AvaLabeledVideoFramePaths.read_label_map(<span class="string">&quot;selfutils/temp.pbtxt&quot;</span>)</span><br><span class="line">    coco_color_map = [[random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>)]</span><br><span class="line"></span><br><span class="line">    vide_save_path = config.output</span><br><span class="line">    video=cv2.VideoCapture(config.<span class="built_in">input</span>)</span><br><span class="line">    width,height = <span class="built_in">int</span>(video.get(<span class="number">3</span>)),<span class="built_in">int</span>(video.get(<span class="number">4</span>))</span><br><span class="line">    video.release()</span><br><span class="line">    outputvideo = cv2.VideoWriter(vide_save_path,cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>), <span class="number">25</span>, (width,height))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;processing...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    cap = MyVideoCapture(config.<span class="built_in">input</span>)</span><br><span class="line">    id_to_ava_labels = &#123;&#125;</span><br><span class="line">    a=time.time()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> cap.end:</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        yolo_preds=model([img], size=imsize)</span><br><span class="line">        yolo_preds.files=[<span class="string">&quot;img.jpg&quot;</span>]</span><br><span class="line">        </span><br><span class="line">        deepsort_outputs=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yolo_preds.pred)):</span><br><span class="line">            temp=deepsort_update(deepsort_tracker,yolo_preds.pred[j].cpu(),yolo_preds.xywh[j][:,<span class="number">0</span>:<span class="number">4</span>].cpu(),yolo_preds.ims[j])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp)==<span class="number">0</span>:</span><br><span class="line">                temp=np.ones((<span class="number">0</span>,<span class="number">8</span>))</span><br><span class="line">            deepsort_outputs.append(temp.astype(np.float32))</span><br><span class="line">            </span><br><span class="line">        yolo_preds.pred=deepsort_outputs</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cap.stack) == <span class="number">25</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;processing <span class="subst">&#123;cap.idx // <span class="number">25</span>&#125;</span>th second clips&quot;</span>)</span><br><span class="line">            clip = cap.get_video_clip()</span><br><span class="line">            <span class="keyword">if</span> yolo_preds.pred[<span class="number">0</span>].shape[<span class="number">0</span>]:</span><br><span class="line">                inputs, inp_boxes, _=ava_inference_transform(clip, yolo_preds.pred[<span class="number">0</span>][:,<span class="number">0</span>:<span class="number">4</span>], crop_size=imsize)</span><br><span class="line">                inp_boxes = torch.cat([torch.zeros(inp_boxes.shape[<span class="number">0</span>],<span class="number">1</span>), inp_boxes], dim=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(inputs, <span class="built_in">list</span>):</span><br><span class="line">                    inputs = [inp.unsqueeze(<span class="number">0</span>).to(device) <span class="keyword">for</span> inp <span class="keyword">in</span> inputs]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    inputs = inputs.unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    slowfaster_preds = video_model(inputs, inp_boxes.to(device))</span><br><span class="line">                    slowfaster_preds = slowfaster_preds.cpu()</span><br><span class="line">                <span class="keyword">for</span> tid,avalabel <span class="keyword">in</span> <span class="built_in">zip</span>(yolo_preds.pred[<span class="number">0</span>][:,<span class="number">5</span>].tolist(), np.argmax(slowfaster_preds, axis=<span class="number">1</span>).tolist()):</span><br><span class="line">                    id_to_ava_labels[tid] = ava_labelnames[avalabel+<span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">        save_yolopreds_tovideo(yolo_preds, id_to_ava_labels, coco_color_map, outputvideo, config.show)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;total cost: &#123;:.3f&#125; s, video length: &#123;&#125; s&quot;</span>.<span class="built_in">format</span>(time.time()-a, cap.idx / <span class="number">25</span>))</span><br><span class="line">    </span><br><span class="line">    cap.release()</span><br><span class="line">    outputvideo.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;saved video to:&#x27;</span>, vide_save_path)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--input&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;/home/wufan/images/video/vad.mp4&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test imgs folder or video or camera&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;output.mp4&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;folder to save result imgs, can not use input folder&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--imsize&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">640</span>, <span class="built_in">help</span>=<span class="string">&#x27;inference size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.4</span>, <span class="built_in">help</span>=<span class="string">&#x27;object confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.4</span>, <span class="built_in">help</span>=<span class="string">&#x27;IOU threshold for NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;cuda&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;filter by class: --class 0, or --class 0 2 3&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--show&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;show img&#x27;</span>)</span><br><span class="line">    config = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> config.<span class="built_in">input</span>.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;using local camera.&quot;</span>)</span><br><span class="line">        config.<span class="built_in">input</span> = <span class="built_in">int</span>(config.<span class="built_in">input</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(config)</span><br><span class="line">    main(config)</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>demo 中用的是网络 yolo，默认下载位置 C:\Users\Administrator&#x2F;.cache\torch\hub\ultralytics_yolov5_master，而 slowfast 权重文件位置是 C:\Users\Administrator.cache\torch\hub\checkpoints\SLOWFAST_8x8_R50_DETECTION.pyth。 </p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>运行执行命令，出现 AttributeError: ‘Upsample’ object has no attribute ‘recompute_scale_factor’错误</p><p>根据提示，找到 torch 下的 upsampling.py，将 return F.interpolate (input, self.size, self.scale_factor, self.mode, self.align_corners 修改为return F.interpolate(input, self.size, self.scale_factor, self.mode, self.align_corners)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间刷短视频看到过别人用摄像头自动化监控员工上班状态，比如标注员工是不是离开了工位，在位置上是不是摸鱼。虽然是段子，但是这个是可以用识别</summary>
      
    
    
    
    <category term="人工智能" scheme="http://z11r00.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="计算机视觉" scheme="http://z11r00.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>三种方式，浅谈 Cocos Creator 的动画添加</title>
    <link href="http://z11r00.github.io/2024/05/30/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%B5%85%E8%B0%88%20Cocos%20Creator%20%E7%9A%84%E5%8A%A8%E7%94%BB%E6%B7%BB%E5%8A%A0/"/>
    <id>http://z11r00.github.io/2024/05/30/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%B5%85%E8%B0%88%20Cocos%20Creator%20%E7%9A%84%E5%8A%A8%E7%94%BB%E6%B7%BB%E5%8A%A0/</id>
    <published>2024-05-30T09:13:50.000Z</published>
    <updated>2024-06-01T03:59:51.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然 Cocos 的官方文档对动画系统做了较详细的介绍，但是对于刚接触的同学（比如我）来说还是不太友好。尽管如此，我就按文档加社区帖子一起实践了一下。为了方便忘记后能快速捡起，所以就用我的方式结合使用场景，简单介绍一下 Cocos Creator 动画添加的三种方式。</p><p><img src="https://image-static.segmentfault.com/142/822/1428222877-b05dc3acfe95cd47" alt="图片"></p><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><p>这个是 Cocos Creator 动画系统自带的一种对节点进行标准位移、旋转、缩放动画操作。可以用来制作一些按钮加亮，引导之类的业务型动画。</p><p><img src="https://image-static.segmentfault.com/213/163/2131635919-325fe6db8ba9ee39" alt="图片"></p><h4 id="创建节点并挂载-“Animation”-组件"><a href="#创建节点并挂载-“Animation”-组件" class="headerlink" title="创建节点并挂载 “Animation” 组件"></a>创建节点并挂载 “Animation” 组件</h4><p>添加组件 &gt; 其他组件 &gt; Animation，然后打开动画编辑器，再点击 “新建 Clip 文件”，保存后放在 “assets” 下 “animations”，后缀为.anim 的文件。<br><img src="https://image-static.segmentfault.com/360/042/3600423541-68f2772d530ab950_fix732" alt="图片"></p><h4 id="动画编辑"><a href="#动画编辑" class="headerlink" title="动画编辑"></a>动画编辑</h4><p>进入编辑后，找到属性列表，点击 “Add Property”，选择列表的 “position，width，coclor” 等属性，点击右侧菜单按钮，可以插入关键帧，删除关键帧，清空关键帧等，添加一帧就可以在属性检查器对应节点的属性进行调节。<br><img src="https://image-static.segmentfault.com/826/974/826974519-10419ecf40822c0b_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/199/406/1994064641-b6d320e09536169e_fix732" alt="图片"></p><h4 id="挂载动画剪辑"><a href="#挂载动画剪辑" class="headerlink" title="挂载动画剪辑"></a>挂载动画剪辑</h4><p>将已经编辑好的动画剪辑文件 (.anim 后缀)，拖入到节点动画组件的 animation-clip 或 Default Clip 中。4. 脚本控制创建 ts 文件，将以下代码的脚本挂载到与动画相同的节点上（当然也可以制作预设体）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(cc.<span class="type">Animation</span>);</span><br><span class="line">        <span class="comment">// start_btn_dance 动画剪辑名称</span></span><br><span class="line">        anim.play(&#x27;start_btn_dance&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h2><p>帧动画也是 Cocos Creator 自带的编辑功能，就是在指定时间内循环各种动作或样式的图片，当然前期要准备好序列帧图片放到 assets 下。</p><h4 id="创建-Animation-组件和动画剪辑"><a href="#创建-Animation-组件和动画剪辑" class="headerlink" title="创建 Animation 组件和动画剪辑"></a>创建 Animation 组件和动画剪辑</h4><p>这部分和上面的属性动画操作一样<br><img src="https://image-static.segmentfault.com/329/445/3294454098-84728ec1e33dc20e" alt="图片"></p><h4 id="动画编辑-1"><a href="#动画编辑-1" class="headerlink" title="动画编辑"></a>动画编辑</h4><p>这里在属性列表 Add Property 要选择 “cc.Sprite.spriteFrame”，然后将资源里的序列图片一张一张放入关键帧里。<br><img src="https://image-static.segmentfault.com/592/234/59223440-1a88d5a3c2c0c2c8_fix732" alt="图片"></p><h4 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>如果只是用于播放动画的和上面的也一样，但是动画事件需要分开说一下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="comment">// 获取当前节点动画组件</span></span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(cc.<span class="type">Animation</span>);</span><br><span class="line">        <span class="comment">// 播放指定动画剪辑</span></span><br><span class="line">        anim.play(&#x27;monster&#x27;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.node.on(&#x27;onAnimCompleted&#x27;, this.onAnimCompleted, this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画事件，接收两个参数</span></span><br><span class="line">    onAnimCompleted(num, str) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;start anim completed end~&quot;</span>);</span><br><span class="line">        console.log(num);</span><br><span class="line">        console.log(str);</span><br><span class="line">        <span class="comment">//console.log(&#x27;onAnimCompleted: param1[%s], param2[%s]&#x27;, num, string);</span></span><br><span class="line">        <span class="comment">//console.log(&#x27;onAnimCompleted: this is a test event12345&#x27; + num);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h4><p>确切的说应该是动画帧事件，就是在指定帧上添加一个事件（可以预留参数），当播放到该帧时触发。当前触发是在脚本里控制，这种一般用来做比如一个角色击杀时，要触发一个大招特效动画等。<br><img src="https://image-static.segmentfault.com/211/485/2114857068-21a54bf6832085d6_fix732" alt="图片"></p><h2 id="第三方工具动画"><a href="#第三方工具动画" class="headerlink" title="第三方工具动画"></a>第三方工具动画</h2><p>通过第三方的工具制作动画后导入到 Cocos Creator， 官方提供对 Spine 和 DragonBones 的支持。下面以 Spine 为例，从工具内导出，到 Cocos 脚本控制进行演示。</p><h4 id="Spine-导出"><a href="#Spine-导出" class="headerlink" title="Spine 导出"></a>Spine 导出</h4><p>可以直接用工具提供的示例，然后选择导出，注意是 json 格式文件。<br><img src="https://image-static.segmentfault.com/216/635/2166353095-0633de7f2b3da2de_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/304/479/3044791017-b16b919adfeb94bd_fix732" alt="图片"></p><h4 id="Cocos-Creator-导入"><a href="#Cocos-Creator-导入" class="headerlink" title="Cocos Creator 导入"></a>Cocos Creator 导入</h4><p>将上面从 Spine 导出的三个文件整成一文件夹放入 cocos 项目下 assets 的资源下，然后找到后缀 json 文件拖入层级管理器中。<br><img src="https://image-static.segmentfault.com/593/848/593848238-159b87dc7f162bbb_fix732" alt="图片"></p><h4 id="脚本控制-1"><a href="#脚本控制-1" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>因为在 Spine 已经做好了动画，皮肤和帧事件，所以脚本也就是对动画的播放，操作换肤和事件回调等。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(sp.<span class="type">Skeleton</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空动画管道</span></span><br><span class="line">        <span class="comment">//anim.clearTracks();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加动作</span></span><br><span class="line">        anim.addAnimation(<span class="number">0</span>, &#x27;run&#x27;, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">/*anim.addAnimation(0, &#x27;walk&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;jump&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;idle&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;head-turn&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;fall&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;crouch&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;attack&#x27;, false, 0);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止动画</span></span><br><span class="line">        <span class="comment">/*let SpEnt: sp.spine.TrackEntry = anim.setAnimation(0, &#x27;run&#x27;, false);</span></span><br><span class="line"><span class="comment">        SpEnt.animationStart = SpEnt.animationEnd;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换肤</span></span><br><span class="line">        <span class="comment">//anim.setSkin(&quot;default&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听动画开始</span></span><br><span class="line">        anim.setStartListener(function () &#123;</span><br><span class="line">            console.log(<span class="string">&quot;animate start~&quot;</span>);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听动画结束</span></span><br><span class="line">        anim.setCompleteListener(function () &#123;</span><br><span class="line">            console.log(&#x27;animater end~&#x27;);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/284/953/2849534078-cb1e30ab9f689052" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然 Cocos 的官方文档对动画系统做了较详细的介绍，但是对于刚接触的同学（比如我）来说还是不太友好。尽管如此，我就按文档加社区帖子一起实</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://z11r00.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="http://z11r00.github.io/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>初探 Cocos Creator： 碰撞与物理系统</title>
    <link href="http://z11r00.github.io/2024/05/30/%E5%88%9D%E6%8E%A2%20Cocos%20Creator%EF%BC%9A%20%E7%A2%B0%E6%92%9E%E4%B8%8E%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://z11r00.github.io/2024/05/30/%E5%88%9D%E6%8E%A2%20Cocos%20Creator%EF%BC%9A%20%E7%A2%B0%E6%92%9E%E4%B8%8E%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-05-30T08:40:50.000Z</published>
    <updated>2024-05-31T02:45:57.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道你刚开始玩碰撞时，会不会遇到始终无法触发碰撞事件？玩物理系统时，自由落体的刚体会穿过 “地面” 刚体等情况？没错我全都遇到过，那么下面我就用红蓝色方块，简单实战一下 Cocos Creator 的碰撞与物理系统。<br><img src="https://image-static.segmentfault.com/128/723/128723897-3fb474755484344a" alt="图片"></p><h2 id="场景创建"><a href="#场景创建" class="headerlink" title="场景创建"></a>场景创建</h2><p>场景很简单，一个白色背景，两个红蓝色玩家，和一个绿色大草地。创建的方式也很简单，全部采用 Sprite 单色。节点创建层级管理器 -&gt;Canvas 右键 -&gt; 创建节点 -&gt; 创建渲染节点 -&gt;Sprite（单色）。<br><img src="https://image-static.segmentfault.com/439/006/439006136-7f39b5701af77d97" alt="图片"></p><h4 id="颜色填充"><a href="#颜色填充" class="headerlink" title="颜色填充"></a>颜色填充</h4><p>在属性检查器，找到 Node 下的 Color，选择色盘里的一颜色即可。分组由于物理和碰撞中都要用到，这里就提前给两个玩家和绿草地创建分组并分配好。在属性检查器的 Node 中，找到 Group 点击编辑再添加，如下图。<br><img src="https://image-static.segmentfault.com/279/757/2797579645-dc8cdfb5e971b809_fix732" alt="图片"></p><h4 id="碰撞匹对"><a href="#碰撞匹对" class="headerlink" title="碰撞匹对"></a>碰撞匹对</h4><p>将三个分组进行碰撞的匹对，一定要勾选这个，不然后面测试碰撞无法触发回调，而是直接穿过另一个物体。<br><img src="https://image-static.segmentfault.com/180/036/1800364862-0d128f15a5990bc9_fix732" alt="图片"></p><h2 id="碰撞系统测试"><a href="#碰撞系统测试" class="headerlink" title="碰撞系统测试"></a>碰撞系统测试</h2><h4 id="碰撞组件添加"><a href="#碰撞组件添加" class="headerlink" title="碰撞组件添加"></a>碰撞组件添加</h4><p>碰撞组件有三种，Box（盒状）、Circle（圆形）、Polygon（多边形），可以根据不同的物体形状选择对应组件类型，比如像赛车的就可以选盒状，合成西瓜的那种就可以选圆形。在层级管理器中选中节点，进入属性检查器，添加组件，选择碰撞组件，Box Collider。<br><img src="https://image-static.segmentfault.com/415/221/4152218047-2d044764b41e891c" alt="图片"></p><h4 id="参数介绍（Box）"><a href="#参数介绍（Box）" class="headerlink" title="参数介绍（Box）"></a>参数介绍（Box）</h4><ul><li><p>Tag： 用于给在同一节点下，标识不同碰撞组件的</p></li><li><p>Offset： 碰撞的中心点位置，用于给碰撞范围定位</p></li><li><p>Size： 默认是物品节点的大小，其实是物体碰撞的范围大小<br><img src="https://image-static.segmentfault.com/592/422/592422880-7b78c0c2399be56e_fix732" alt="图片"><br>脚本测试创建脚本，开启碰撞监听和碰撞范围绘制 Debug，update 中添加红色方块向右移动，设置碰撞产生的回调。最后拖入节点的属性面板中，前提相关物品都添加了碰撞组件，并且也勾选了碰撞匹对。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 碰撞系统（绘制和监听开启）</span></span><br><span class="line">      <span class="keyword">var</span> manager = cc.<span class="property">director</span>.<span class="title function_">getCollisionManager</span>();</span><br><span class="line">      manager.<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">      manager.<span class="property">enabledDebugDraw</span> = <span class="literal">true</span>;</span><br><span class="line">      manager.<span class="property">enabledDrawBoundingBox</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">dt</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span> += dt * <span class="number">50</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞产生的时候调用</span></span><br><span class="line"><span class="comment">   * param  &#123;Collider&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * param  &#123;Collider&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">onCollisionEnter</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_enter_1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onCollisionStay</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_stay_2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞结束后调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onCollisionExit</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_exit_3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="物理系统测试"><a href="#物理系统测试" class="headerlink" title="物理系统测试"></a>物理系统测试</h2><h4 id="物理碰撞组件添加"><a href="#物理碰撞组件添加" class="headerlink" title="物理碰撞组件添加"></a>物理碰撞组件添加</h4><p>选择物理组件下的 Box（添加组件 -&gt; 物理组件 -&gt;Collider-&gt;Box），碰撞 + 刚体。参数就不介绍了，在编辑器里悬浮文字就可以看到用法描述，不过 刚体（RigidBody）的 “Type” 需要注意一下。<br><img src="https://image-static.segmentfault.com/306/275/3062755745-0c947fd4c11cf6e7_fix732" alt="图片"></p><h4 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h4><p>脚本中开启物理系统才可以看到自由落体效果，而碰撞监听需要在属性检查器的刚体中 “Enabled Contact Listen” 开启。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 开启物理系统</span></span><br><span class="line">      cc.<span class="property">director</span>.<span class="title function_">getPhysicsManager</span>().<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 物理物品绘制</span></span><br><span class="line">      <span class="comment">/*cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_pairBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_centerOfMassBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_jointBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_shapeBit;*/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">dt</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**刚体的属性Enabled Contact Listen必须开启**/</span></span><br><span class="line">  <span class="comment">// 只在两个碰撞体开始接触时被调用一次</span></span><br><span class="line">  <span class="title function_">onBeginContact</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~collider start1111111111111111111111~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只在两个碰撞体结束接触时被调用一次</span></span><br><span class="line">  <span class="title function_">onEndContact</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~collider end2222222222222222222222222~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次将要处理碰撞体接触逻辑时被调用</span></span><br><span class="line">  <span class="title function_">onPreSolve</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~pre collider3333333333333333333333333~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次处理完碰撞体接触逻辑时被调用</span></span><br><span class="line">  <span class="title function_">onPostSolve</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~solve44444444444444444444444444444444~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://image-static.segmentfault.com/128/723/128723897-3fb474755484344a" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知道你刚开始玩碰撞时，会不会遇到始终无法触发碰撞事件？玩物理系统时，自由落体的刚体会穿过 “地面” 刚体等情况？没错我全都遇到过，那么下面</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://z11r00.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="http://z11r00.github.io/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>hexo实战：（一）零成本搭建个人独立博客</title>
    <link href="http://z11r00.github.io/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>http://z11r00.github.io/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-05-30T08:13:50.000Z</published>
    <updated>2024-05-30T12:03:20.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多平台都能写博客还有创作激励，为什么我又要搭一个？为什么这次要选择用Hexo框架？</p><p>对应的原因是流量自由和省钱，第一个，很多平台能写但不是都有收益，而且平台有自身的规则，比如会屏蔽一些推广类信息。如果我哪天做了一产品，是没办法直接用平台博客的方式硬推的，至少放码和链接不行。第二个用Hexo搭到GitHub上，我可以不用买服务器，毕竟现在也还没有想法要做一个什么样的东西。</p><p>总之，有个独立博客，相比平台博客在内容约束上更自由。有想法了就发出来，做了游戏什么的就放出来，md的文章以后要存储备份可以转word，更方便在副业的路上轻装探索。</p><p><img src="https://image-static.segmentfault.com/889/574/889574834-66558a201aa3a_fix732"></p><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo是一款基于Node.js的开源静态博客框架，用于快速、简单且高效地搭建个人或团队的静态博客网站。说白了他是一个静态网站生成器，我们新增文章只需要编辑md文件，通过运行命令再生成像html的静态文件。其实我挺早听过Hexo，但一直没用，直到我cms搭的博客别人挂马后。我关闭网站全面使用平台博客，但经种种原因，我又萌生了建独立博客的想法，并且这次打算走长期路线，第一步先记录上次Hexo搭建过程仅供参考。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>本地构建Hexo</li><li>配置 GitHub</li><li>代码上传与备份</li><li>个性化域名绑定</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Hexo的博客，不管是页面的添加还是构建都是通过npm命令，所以最基本要把Node安装了。项目部署和部署的地方又在GitHub，所以Git也要提前装好。这里强调一下，运行Hexo命令最好在Git的GUI窗口里，不要用Windows的cmd，坑多，关于Node和Git环境安装就跳过了。</p><h2 id="构建Hexo"><a href="#构建Hexo" class="headerlink" title="构建Hexo"></a>构建Hexo</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/397/606/3976061194-66547ba7ea10b_fix732"></p><h3 id="检验Hexo是否安装"><a href="#检验Hexo是否安装" class="headerlink" title="检验Hexo是否安装"></a>检验Hexo是否安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建一blog项目</span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"># 进入项目</span><br><span class="line">cd blog</span><br><span class="line"></span><br><span class="line"># 安装依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#右键 Git Bush，用户项目自动化部署</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo _config.yml中文乱码问题</span><br><span class="line">用Notepad++等编辑器打开，选择 “编码” -&gt; “转为UTF-8编码”</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/212/068/2120682345-665553639b9a6_fix732" alt="安装项目开发者操作包.jpg"></p><h3 id="项目预览"><a href="#项目预览" class="headerlink" title="项目预览"></a>项目预览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 清理旧的静态文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"># 运行预览项目</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/203/206/2032060845-66547f7eacb7a_fix732" alt="Snipaste_2024-05-23_19-55-21.jpg"><br><img src="https://image-static.segmentfault.com/362/375/3623756222-66547f8a45bad_fix732" alt="Snipaste_2024-05-23_19-57-44.jpg"></p><h2 id="配置-GitHub"><a href="#配置-GitHub" class="headerlink" title="配置 GitHub"></a>配置 GitHub</h2><p>这里虽然只是写的配置GitHub，其实包含了本地用Git生成SSH密钥对，和GitHub上公钥添加，提交Token的获取，以及Pages服务的开启。还有仓库名的建立也有讲究，下面就从这些点开始逐一展开。</p><h3 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h3><p>仓库名是个什么讲究法呢？就是格式要保持 “github账号名.github.io”, 比如我的账户名是“z11r00”，那么仓库就要建成 “z11r00.github.io”。如果不这样，最后等用Hexo部署完毕后，初始的域名可能就是 “github账号名.github.io&#x2F;仓库名”，会在后面多了一个路径，而且hexo的config没有设置好连css都加载不出来。<br><img src="https://image-static.segmentfault.com/193/028/1930284381-66554881e786a_fix732" alt="image.png"></p><h3 id="设置SSH"><a href="#设置SSH" class="headerlink" title="设置SSH"></a>设置SSH</h3><p>GitHub 的 SSH（Secure Shell）主要用于安全地连接到 GitHub 服务器，其实就是平时Git常用的克隆、拉取、提交、推送等操作。而好处除了安全外，就是提交代码不用每次都要输入账号密码。如果安装了hexo-deployer-git的话，只需一个命令就可以完成项目从静态构建到自动部署。</p><h4 id="生成SSH密钥对"><a href="#生成SSH密钥对" class="headerlink" title="生成SSH密钥对"></a>生成SSH密钥对</h4><p>打开Git面板，输入 “ssh-keygen -t rsa -C GitHub账户”, 这里的GitHUb账户是你登陆GitHub的邮箱等方式。生成后找到目录下的id_rsa.pub（公钥），用编辑器打开并复制。</p><p><img src="https://image-static.segmentfault.com/375/870/3758702029-66554b07260a3_fix732" alt="实际生成id_rsa文件.jpg"></p><h4 id="GitHub中添加SSH公钥"><a href="#GitHub中添加SSH公钥" class="headerlink" title="GitHub中添加SSH公钥"></a>GitHub中添加SSH公钥</h4><p>登陆GitHub网站，点击个人头像，找到 “Settings”-&gt;”SSH and GPG keys”后，点击 “New SSH keys”，最后将前面复制的很长的公钥字符串粘贴到Key文本框中。</p><p><img src="https://image-static.segmentfault.com/787/245/787245942-66554dae16cd9_fix732" alt="github添加ssh.jpg"><br><img src="https://image-static.segmentfault.com/358/939/3589395181-66554db78fe97_fix732" alt="github添加ssh key.jpg"><br><img src="https://image-static.segmentfault.com/992/287/992287568-66554dc28c008_fix732" alt="github粘贴ssh.jpg"></p><h4 id="验证设备是否可连接"><a href="#验证设备是否可连接" class="headerlink" title="验证设备是否可连接"></a>验证设备是否可连接</h4><p>通过 “ssh -T <a href="mailto:git@github.com">git@github.com</a>” 命令，验证当前的设备是否可以连接。<br><img src="https://image-static.segmentfault.com/241/980/241980211-66554e1e2ec12_fix732" alt="校验ssh是否绑定.jpg"></p><h4 id="获取提交的token"><a href="#获取提交的token" class="headerlink" title="获取提交的token"></a>获取提交的token</h4><p>虽然说SSH连接不用一直登陆，但是初次还要要的。而且不光要输入账号密码还需要一个提交用的Token,没有这个，运行hexo d一直提示Logon failed, 这个后面会集中列出报错事故的。</p><p>获取token，还是进入“Settins”，找到 “Developer settings”-&gt;“Personal access tokens”-&gt;“Tokens(classic)”, 然后设置备注和过期时间。最主要的权限要勾选 “workflow”、“gist”、“user”，点击 “Generate”按钮，生成的”ghp_”为前缀的就是token了，复制并保存下来。</p><p><img src="https://image-static.segmentfault.com/209/412/209412508-6655518f5f838_fix732" alt="提交仓库失败1.jpg"><br><img src="https://image-static.segmentfault.com/145/454/1454543801-665551992785f_fix732" alt="提交仓库失败3.jpg"><br><img src="https://image-static.segmentfault.com/250/879/2508792898-6655519f08d83_fix732" alt="提交仓库失败4.jpg"><br><img src="https://image-static.segmentfault.com/236/974/2369743040-665551a47567b_fix732" alt="提交仓库失败5.jpg"></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>项目部署的其实是将Hexo生成的静态文件提交到github上，后期添加文章也就是markdown文件，继续重新生成，重新部署。而项目的代码却在本地，虽然代码量不多，但是里面的package.json和_config.yml，以及用到的主题包，还是有必要保存一下。所以我这里的方法是，静态部署项目放在一个公有仓库，而项目源代码单独提交到一私有仓库下。</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>打开项目根目录下的_config.yml，主要添加仓库的地址，其他的配置下篇再介绍。因为hexo很多玩法更多的是配置和各种依赖，比如可以添加统计、留言、修改主题、站内搜索、甚至广告位等等。<br><img src="https://image-static.segmentfault.com/795/404/795404409-665572496e088_fix732" alt="image.png"></p><h3 id="静态文件生成"><a href="#静态文件生成" class="headerlink" title="静态文件生成"></a>静态文件生成</h3><p>通过 “hexo clean” 先清理，然后执行 “hexo g” 重新生成。</p><p><img src="https://image-static.segmentfault.com/419/680/4196801990-66555529bcbf6_fix732" alt="将博客编译为静态文件项目.jpg"></p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>通过命令 “hexo d”，开始部署项目，如果第一次运行，就需要前面提到的输入github账号密码。确认Login后会再次弹一个窗口就是输入Token了，最后完成部署。这里需要注意一下的是，最好用Git面板运行命令，如果是cmd很有可能第二次的窗无法弹出，亲测坑点。</p><p><img src="https://image-static.segmentfault.com/745/861/745861770-6655560a86a7d_fix732" alt="页面上传.jpg"><br><img src="https://image-static.segmentfault.com/178/743/1787433640-6655565a64292_fix732" alt="image.png"></p><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>部署完成就进入仓库下，除了查看提交的代码外，打开仓库下的 “Settings”，找到 “Pages”。</p><p><img src="https://image-static.segmentfault.com/186/643/1866436389-66556c0392c01_fix732" alt="提交仓库失败6.jpg"></p><h2 id="个性化域名绑定"><a href="#个性化域名绑定" class="headerlink" title="个性化域名绑定"></a>个性化域名绑定</h2><p>有一个git域名其实也不错，为什么还要买一个去绑定呢？一个是我本身这域名就空在这里，第二个是可以给博客增加一点IP点，第三个是更利于某度的爬取。我看其他博主说国内一些搜索引擎屏蔽了github的pages博客，当然我没有验证过，下次也要做SEO相关的时候可以测试一下。</p><h3 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h3><p>要想知道当前项目部署的独立IP地址，只需要ping一下github分配的域名，比如我直接 “ping z11r00.github.io”就可以看到了。</p><p><img src="https://image-static.segmentfault.com/125/915/1259157655-66556e994a682_fix732" alt="IP获取.jpg"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>进入购买的域名控制台，给自己的域名添加两个解析，一个指向旧域名，一个解析到前面获取到的IP地址。</p><p><img src="https://image-static.segmentfault.com/423/209/4232091621-66556efc9020b_fix732" alt="域名解析.jpg"></p><h3 id="项目绑定域名"><a href="#项目绑定域名" class="headerlink" title="项目绑定域名"></a>项目绑定域名</h3><p>进入仓库的“Settings”下，点击 “Pages”，找到 “Custom domain”，将自己的域名粘贴进文本框保存。然后在项目的“source” 新建CNAME（没有后缀）, 打开文件粘贴域名，比如我的zerofc.cn，最后再重新部署项目访问。</p><p><img src="https://image-static.segmentfault.com/110/663/1106633025-6655710566967_fix732" alt="image.png"></p><h2 id="报错汇总"><a href="#报错汇总" class="headerlink" title="报错汇总"></a>报错汇总</h2><p>1.extends includes&#x2F;layout.pug block content include .&#x2F;includes&#x2F;mixins&#x2F;post-ui.pug #recent-posts.recent-posts +postUI include includes&#x2F;pagination.pug<br>项目启动后报的这个，是因为缺失了一些依赖包，上面的是没有 pug 以及 stylus 的渲染器，解决方法就是安装对应的依赖。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">renderer</span>-pug hexo-<span class="keyword">renderer</span>-stylus --save</span><br></pre></td></tr></table></figure><p>2.运行后打开hexo博客上的中文乱码<br>解决方法是用Notepad++等编辑器打开，选择 “编码” -&gt; “转为UTF-8编码”。</p><p>3.unable to access ‘<a href="https://github.com/z11r00/z11r00.github.io.git/">https://github.com/z11r00/z11r00.github.io.git/</a>‘: Empty reply from server<br>出现这个报错的是项目初次部署时，原因就是没有设置Token，解决方法就是前面“配置 GitHub”的“提交Token获取”部分。</p><p>4.unable to access ‘<a href="https://github.com/z11r00/z11r00.github.io.git/">https://github.com/z11r00/z11r00.github.io.git/</a>‘: The requested URL returned error: 403<br>出现这个一般就是间接性打开GitHub网站，毕竟是国外网站，多刷新几下，多请求几下就可以了。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>既然博客已经搭起来了，后面还有分两步走，凑成三部曲。第一个是Hexo的各种配置和插件的玩法，第二个是Hexo博客SEO相关的内容，如果我那个小游戏软著下来了，可能博客的事情就会延后一点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很多平台都能写博客还有创作激励，为什么我又要搭一个？为什么这次要选择用Hexo框架？&lt;/p&gt;
&lt;p&gt;对应的原因是流量自由和省钱，第一个，很多</summary>
      
    
    
    
    <category term="前端开发" scheme="http://z11r00.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Hexo" scheme="http://z11r00.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
